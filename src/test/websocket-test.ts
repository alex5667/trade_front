'use client'

import { getWebSocketClient } from '@/services/websocket.service'

/**
 * WebSocket —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
 * ------------------------------
 * –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è 24h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
 */

const WEBSOCKET_URL = 'ws://localhost:3001'

// –°–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ 24h)
const EVENTS_TO_MONITOR = [
	'top:gainers:24h', 'top:losers:24h',
	'trigger:gainers-24h', 'trigger:losers-24h'
]

/**
 * –ü—Ä–æ—Å—Ç–æ–π WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class WebSocketTestClient {
	private ws: WebSocket | null = null
	private isConnected = false
	private reconnectAttempts = 0
	private maxReconnectAttempts = 5

	/**
	 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
	 */
	connect() {
		try {
			console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${WEBSOCKET_URL}...`)
			this.ws = new WebSocket(WEBSOCKET_URL)

			this.ws.onopen = () => {
				console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
				this.isConnected = true
				this.reconnectAttempts = 0
			}

			this.ws.onmessage = (event) => {
				try {
					const data = JSON.parse(event.data)
					const eventType = data.event || data.type

					if (EVENTS_TO_MONITOR.includes(eventType)) {
						console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${eventType}`, data.data)
					} else {
						console.log(`üì¨ –°–æ–±—ã—Ç–∏–µ: ${eventType}`, data)
					}
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
					console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', event.data)
				}
			}

			this.ws.onclose = (event) => {
				console.log(`‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${event.code} ${event.reason}`)
				this.isConnected = false
				this.reconnect()
			}

			this.ws.onerror = (error) => {
				console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket:', error)
		}
	}

	/**
	 * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	 */
	private reconnect() {
		if (this.reconnectAttempts < this.maxReconnectAttempts) {
			this.reconnectAttempts++
			console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`)
			setTimeout(() => this.connect(), 3000)
		} else {
			console.error('‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
		}
	}

	/**
	 * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	 */
	disconnect() {
		if (this.ws) {
			console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞')
			this.ws.close()
			this.ws = null
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	sendTest() {
		if (this.isConnected && this.ws) {
			const testMessage = {
				event: 'test',
				data: { message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', timestamp: Date.now() }
			}
			this.ws.send(JSON.stringify(testMessage))
			console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
		} else {
			console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
		}
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
	 */
	subscribe(eventName: string) {
		if (this.isConnected && this.ws) {
			const subscribeMessage = {
				event: 'subscribe',
				data: { eventName }
			}
			this.ws.send(JSON.stringify(subscribeMessage))
			console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${eventName}`)
		} else {
			console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
		}
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	getStatus() {
		return {
			connected: this.isConnected,
			reconnectAttempts: this.reconnectAttempts,
			readyState: this.ws?.readyState
		}
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
const testClient = new WebSocketTestClient()

	// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
	; (window as any).wsTest = {
		connect: () => testClient.connect(),
		disconnect: () => testClient.disconnect(),
		status: () => console.log(testClient.getStatus()),
		sendTest: () => testClient.sendTest(),
		subscribe: (eventName: string) => testClient.subscribe(eventName),
		subscribeAll: () => {
			EVENTS_TO_MONITOR.forEach(event => testClient.subscribe(event))
		}
	}

console.log('WebSocket —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ wsTest –≤ –∫–æ–Ω—Å–æ–ª–∏:')
console.log('- wsTest.connect() - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è')
console.log('- wsTest.disconnect() - –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è')
console.log('- wsTest.status() - —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
console.log('- wsTest.sendTest() - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç')
console.log('- wsTest.subscribe(eventName) - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ')
console.log('- wsTest.subscribeAll() - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è')

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
testClient.connect()

/**
 * This function tests the WebSocket client functionality
 * by setting up event listeners and monitoring messages.
 */
export const testWebSocketClient = () => {
	console.log('Starting WebSocket client test...')

	// Get WebSocket client instance
	const client = getWebSocketClient()

	// Track test statistics
	const stats = {
		messagesReceived: 0,
		connectionAttempts: 0,
		errors: 0,
		eventTypes: {} as Record<string, number>
	}

	// Set up event listeners for various signal types
	const eventTypes = [
		'connect', 'disconnect', 'error', 'pong',
		'signal:volatility', 'volatilitySpike', 'volatilityRange',
		'volumeSpike', 'priceChange',
		'top:gainers:24h', 'top:losers:24h',
		'trigger:gainers-24h', 'trigger:losers-24h'
	]

	// Generic event handler for logging and stats
	const handleEvent = (eventName: string) => (data: any) => {
		stats.messagesReceived++

		// Track event type counts
		stats.eventTypes[eventName] = (stats.eventTypes[eventName] || 0) + 1

		console.log(`[WebSocket Test] Received ${eventName} event:`, data)
	}

	// Set up listeners for each event type
	eventTypes.forEach(eventType => {
		client.on(eventType, handleEvent(eventType))
	})

	// Special handlers for connection events
	client.on('connect', () => {
		console.log('[WebSocket Test] Connected to server')
	})

	client.on('disconnect', () => {
		console.log('[WebSocket Test] Disconnected from server')
		stats.connectionAttempts++
	})

	client.on('error', (error: Error | unknown) => {
		console.error('[WebSocket Test] Error:', error)
		stats.errors++
	})

	// Connect to the WebSocket server
	client.connect()

	// Set up interval to report statistics
	const statsInterval = setInterval(() => {
		console.log('\n[WebSocket Test] Statistics:')
		console.log('------------------------')
		console.log(`Messages received: ${stats.messagesReceived}`)
		console.log(`Connection attempts: ${stats.connectionAttempts}`)
		console.log(`Errors: ${stats.errors}`)
		console.log(`Connection status: ${client.isActive() ? 'Connected' : 'Disconnected'}`)
		console.log('\nEvent types received:')

		Object.entries(stats.eventTypes).forEach(([type, count]) => {
			console.log(`  ${type}: ${count}`)
		})

		console.log('------------------------\n')
	}, 10000)

	// Return a cleanup function
	return () => {
		console.log('[WebSocket Test] Cleaning up...')

		// Remove all event listeners
		eventTypes.forEach(eventType => {
			client.off(eventType, handleEvent(eventType))
		})

		// Disconnect client
		client.disconnect()

		// Clear stats interval
		clearInterval(statsInterval)

		console.log('[WebSocket Test] Cleanup complete')
	}
}

/**
 * Function to test WebSocket with a custom message handler
 */
export const testWebSocketWithHandler = (
	messageHandler: (eventType: string, data: any) => void,
	duration = 60000
) => {
	console.log(`Starting WebSocket test with custom handler for ${duration / 1000}s...`)

	// Get WebSocket client instance
	const client = getWebSocketClient()

	// Set up event listeners for various signal types
	const eventTypes = [
		'signal:volatility', 'volatilitySpike', 'volatilityRange',
		'volumeSpike', 'priceChange',
		'top:gainers:24h', 'top:losers:24h'
	]

	// Create handlers for each event type
	const handlers: Record<string, (data: any) => void> = {}

	eventTypes.forEach(eventType => {
		handlers[eventType] = (data: any) => {
			messageHandler(eventType, data)
		}

		// Attach the handler to the WebSocket client
		client.on(eventType, handlers[eventType])
	})

	// Connect to the WebSocket server
	client.connect()

	// Set up timeout to end test after specified duration
	const timeout = setTimeout(() => {
		console.log('[WebSocket Test] Test duration completed')
		cleanup()
	}, duration)

	// Cleanup function
	const cleanup = () => {
		// Remove all event listeners
		eventTypes.forEach(eventType => {
			client.off(eventType, handlers[eventType])
		})

		// Disconnect client
		client.disconnect()

		// Clear timeout
		clearTimeout(timeout)

		console.log('[WebSocket Test] Test complete')
	}

	// Return cleanup function so test can be stopped early
	return cleanup
}

/**
 * Function to test data consistency between events
 */
export const testDataConsistency = () => {
	console.log('Starting data consistency test...')

	// Tracking data structures
	const symbolData: Record<string, {
		volatility?: number,
		volume?: number,
		price?: number,
		percentChange?: number,
		lastUpdate: number
	}> = {}

	// Handler for all messages
	const handleMessage = (eventType: string, data: any) => {
		if (!data || !data.symbol) return

		const symbol = data.symbol
		const timestamp = data.timestamp || Date.now()

		// Initialize if symbol doesn't exist
		if (!symbolData[symbol]) {
			symbolData[symbol] = { lastUpdate: timestamp }
		}

		// Update data fields based on event type
		if (eventType.includes('volatility') && data.volatility) {
			symbolData[symbol].volatility = data.volatility
		}

		if (eventType.includes('volume') && data.volume) {
			symbolData[symbol].volume = data.volume
		}

		if (eventType.includes('price') && data.price) {
			symbolData[symbol].price = data.price
		}

		if ((eventType.includes('gainers') || eventType.includes('losers')) && data.percentChange) {
			symbolData[symbol].percentChange = data.percentChange
		}

		symbolData[symbol].lastUpdate = timestamp

		// Log the update
		console.log(`[Consistency] Updated ${symbol} from ${eventType}:`, symbolData[symbol])
	}

	// Start test with our custom handler
	const cleanup = testWebSocketWithHandler(handleMessage, 30000)

	// Return cleanup function
	return cleanup
} 
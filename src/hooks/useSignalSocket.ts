// 'use client' tells Next.js this hook runs in the browser
'use client'

/*******************************************************
 * useSignalSocket ‚Äì React hook for subscribing to the
 * WebSocket server on the `/ws` endpoint.
 * ----------------------------------------------------
 * ‚ñ∏ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ BACKEND‚Äë—É –ø–æ WebSocket.
 * ‚ñ∏ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (volatility,
 *   volumeSpike, priceChange, —Ç–æ–ø‚Äë–≥–µ–π–Ω–µ—Ä—ã/–ª—É–∑–µ—Ä—ã,
 *   –∞ —Ç–∞–∫–∂–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ ¬´trigger¬ª‚Äë–∫–∞–Ω–∞–ª—ã –¥–ª—è 1h/4h/24h).
 * ‚ñ∏ –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ
 *   —Å–æ—Å—Ç–æ—è–Ω–∏–µ (useState) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 100 –∑–∞–ø–∏—Å–µ–π
 *   (0‚Äë—è –ø–æ–∑–∏—Ü–∏—è ‚Äì —Å–∞–º–∞—è –Ω–æ–≤–∞—è).
 * ‚ñ∏ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SignalData –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 *   –≤ UI‚Äë–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (Dashboards / Tables / Charts).
 ******************************************************/

import { useSelector } from 'react-redux'

import {
	selectConnectionStatus,
	selectPriceChangeSignals,
	selectTimeframe24hData,
	selectTimeframe5minData,
	selectTrigger24hData,
	selectTrigger5minData,
	selectVolatilitySignals,
	selectVolumeSignals
} from '@/store/signals/selectors/signals.selectors'
import { useSignalSocketInitializer } from './useSignalSocketInitializer'

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–∏–≥–Ω–∞–ª–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π WebSocket API –±—Ä–∞—É–∑–µ—Ä–∞
 */
class TradeSignalClient {
	baseUrl: string
	socket: WebSocket | null
	isConnected: boolean
	reconnectAttempts: number
	maxReconnectAttempts: number
	reconnectDelay: number
	callbacks: Record<string, Function[]>

	constructor(baseUrl = 'ws://localhost:4200') {
		this.baseUrl = baseUrl
		this.socket = null
		this.isConnected = false
		this.reconnectAttempts = 0
		this.maxReconnectAttempts = 5
		this.reconnectDelay = 3000
		this.callbacks = {
			'top:gainers:5min': [],
			'top:losers:5min': [],
			'top:volume:5min': [],
			'top:funding:5min': [],
			'top:gainers:24h': [],
			'top:losers:24h': [],
			'signal:volatility': [],
			'signal:volatilityRange': [],
			'volatilitySpike': [],
			'volatilityRange': [],
			'volumeSpike': [],
			'priceChange': [],
			'top:gainers': [],
			'top:losers': [],
			'trigger:gainers-24h': [],
			'trigger:losers-24h': [],
			'trigger:gainers-5min': [],
			'trigger:losers-5min': [],
			'trigger:volume-5min': [],
			'trigger:funding-5min': [],
			'connect': [],
			'disconnect': [],
			'error': []
		}
	}

	/**
	 * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
	 */
	connect() {
		if (this.socket) {
			console.log('Socket already exists, closing previous connection')
			this.socket.close()
		}

		try {
			// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
			this.socket = new WebSocket(`${this.baseUrl}`)

			this.socket.onopen = () => {
				console.log('‚úÖ WebSocket connected successfully')
				this.isConnected = true
				this.reconnectAttempts = 0
				this._emitEvent('connect')
			}

			this.socket.onmessage = (event) => {
				try {
					const message = JSON.parse(event.data)
					const { event: eventType, data } = message

					console.log(`Received ${eventType} event`, data)
					this._emitEvent(eventType, data)
				} catch (err) {
					console.error('Error parsing message:', err)
				}
			}

			this.socket.onclose = (event) => {
				console.log('‚ö†Ô∏è WebSocket connection closed', event)
				this.isConnected = false
				this._emitEvent('disconnect')
				this._tryReconnect()
			}

			this.socket.onerror = (error) => {
				console.error('‚ùå WebSocket error:', error)
				this._emitEvent('error', error)
			}
		} catch (error) {
			console.error('‚ùå Error establishing WebSocket connection:', error)
			this._emitEvent('error', error)
			this._tryReconnect()
		}
	}

	/**
	 * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
	 */
	disconnect() {
		if (this.socket) {
			this.socket.close()
			this.socket = null
			this.isConnected = false
		}
	}

	/**
	 * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 * @private
	 */
	_tryReconnect() {
		if (this.reconnectAttempts < this.maxReconnectAttempts) {
			this.reconnectAttempts++
			console.log(
				`üîÑ Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`
			)

			setTimeout(() => {
				this.connect()
			}, this.reconnectDelay * this.reconnectAttempts) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
		} else {
			console.error(
				'‚õî Max reconnect attempts reached. Please check your connection.'
			)
		}
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª
	 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
	 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	 */
	on(eventName: string, callback: Function) {
		if (!this.callbacks[eventName]) {
			this.callbacks[eventName] = []
		}
		this.callbacks[eventName].push(callback)
		return this
	}

	/**
	 * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
	 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
	 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	 */
	off(eventName: string, callback: Function) {
		if (this.callbacks[eventName]) {
			this.callbacks[eventName] = this.callbacks[eventName].filter(
				(cb) => cb !== callback
			)
		}
		return this
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 * @returns {boolean} - true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	 */
	isActive(): boolean {
		return (
			this.isConnected &&
			this.socket !== null &&
			this.socket.readyState === WebSocket.OPEN
		)
	}

	/**
	 * –í—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è
	 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
	 * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	 * @private
	 */
	_emitEvent(eventName: string, data?: any) {
		if (this.callbacks[eventName]) {
			this.callbacks[eventName].forEach((callback) => {
				try {
					callback(data)
				} catch (err) {
					console.error(`Error in callback for event ${eventName}:`, err)
				}
			})
		}
	}
}

/**
 * URL WebSocket‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –±–µ—Ä—ë–º –∏–∑ env‚Äë–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã
 * –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å dev / prod –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 */
const SOCKET_URL =
	process.env.NEXT_PUBLIC_SOCKET_URL || 'ws://localhost:4200'

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø, —á—Ç–æ–±—ã TypeScript –Ω–µ —Ä—É–≥–∞–ª—Å—è, –∫–æ–≥–¥–∞
 * –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã (payload / coins / –º–∞—Å—Å–∏–≤).
 */
type AnyObject = { [key: string]: any }

/**
 * useSignalSocket
 * ------------------------------
 * Hook for using signal data from Redux store
 * Compatible with existing code that used the previous useSignalSocket hook
 */
export const useSignalSocket = () => {
	// Initialize the socket connection
	useSignalSocketInitializer()

	// Get data from Redux selectors
	const connectionStatus = useSelector(selectConnectionStatus)
	const volatilitySignals = useSelector(selectVolatilitySignals)
	const volumeSignals = useSelector(selectVolumeSignals)
	const priceChangeSignals = useSelector(selectPriceChangeSignals)

	const timeframe5min = useSelector(selectTimeframe5minData)
	const timeframe24h = useSelector(selectTimeframe24hData)
	const trigger5min = useSelector(selectTrigger5minData)
	const trigger24h = useSelector(selectTrigger24hData)

	// Legacy interface structure for backward compatibility
	return {
		connectionStatus,
		volatilitySignals,
		volumeSignals,
		priceChangeSignals,

		// 5min timeframe data
		topGainers5min: timeframe5min.gainers,
		topLosers5min: timeframe5min.losers,
		topVolume5min: timeframe5min.volume,
		topFunding5min: timeframe5min.funding,

		// 24h timeframe data
		topGainers24h: timeframe24h.gainers,
		topLosers24h: timeframe24h.losers,

		// Trigger data 5min
		triggerGainers5min: trigger5min.gainers,
		triggerLosers5min: trigger5min.losers,
		triggerVolume5min: trigger5min.volume,
		triggerFunding5min: trigger5min.funding,

		// Trigger data 24h
		triggerGainers24h: trigger24h.gainers,
		triggerLosers24h: trigger24h.losers
	}
} 
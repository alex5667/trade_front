// 'use client' tells Next.js this hook runs in the browser
'use client'

/*******************************************************
 * useSignalSocket ‚Äì React hook for subscribing to the
 * Socket.IO server on the `/signals` namespace.
 * ----------------------------------------------------
 * ‚ñ∏ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ BACKEND‚Äë—É –ø–æ WebSocket (Socket.IO).
 * ‚ñ∏ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (volatility,
 *   volumeSpike, priceChange, —Ç–æ–ø‚Äë–≥–µ–π–Ω–µ—Ä—ã/–ª—É–∑–µ—Ä—ã,
 *   –∞ —Ç–∞–∫–∂–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ ¬´trigger¬ª‚Äë–∫–∞–Ω–∞–ª—ã –¥–ª—è 1h/4h/24h).
 * ‚ñ∏ –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ
 *   —Å–æ—Å—Ç–æ—è–Ω–∏–µ (useState) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 100 –∑–∞–ø–∏—Å–µ–π
 *   (0‚Äë—è –ø–æ–∑–∏—Ü–∏—è ‚Äì —Å–∞–º–∞—è –Ω–æ–≤–∞—è).
 * ‚ñ∏ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SignalData –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 *   –≤ UI‚Äë–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (Dashboards / Tables / Charts).
 ******************************************************/

import { useEffect, useRef, useState } from 'react'
import { io, Socket } from 'socket.io-client'

import {
	PriceChangeSignal,
	SignalData,
	TimeframeCoin,
	TimeframeSignal,
	TopGainersSignal,
	TopLosersSignal,
	VolatilitySpikeSignal,
	VolumeSpikeSignal
} from '@/types/signal.types'

/**
 * URL WebSocket‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –±–µ—Ä—ë–º –∏–∑ env‚Äë–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã
 * –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å dev / prod –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 */
const SOCKET_URL =
	process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:4200'

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø, —á—Ç–æ–±—ã TypeScript –Ω–µ —Ä—É–≥–∞–ª—Å—è, –∫–æ–≥–¥–∞
 * –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã (payload / coins / –º–∞—Å—Å–∏–≤).
 */
type AnyObject = { [key: string]: any }

export function useSignalSocket(): SignalData & { connectionStatus: string } {
	/*********************************
	 * refs & state
	 *********************************/
	const socketRef = useRef<Socket | null>(null)
	const reconnectAttemptsRef = useRef(0)
	const maxReconnectAttempts = 10

	// Connection status for UI feedback
	const [connectionStatus, setConnectionStatus] = useState<string>('connecting')

	// ‚ñº –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 100 —ç–ª.)
	const [volatilitySpikes, setVolatilitySpikes] =
		useState<VolatilitySpikeSignal[]>([])
	const [volatilityRanges, setVolatilityRanges] =
		useState<VolatilitySpikeSignal[]>([])
	const [volumeSpikes, setVolumeSpikes] = useState<VolumeSpikeSignal[]>([])
	const [priceChanges, setPriceChanges] = useState<PriceChangeSignal[]>([])

	// ‚ñº –°–ø–∏—Å–∫–∏ —Ç–æ–ø‚Äë–º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã)
	const [topGainers, setTopGainers] = useState<string[]>([])
	const [topLosers, setTopLosers] = useState<string[]>([])

	// ‚ñº ¬´–¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ¬ª —Å–ø–∏—Å–∫–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (1h / 4h / 24h)
	const [triggerGainers1h, setTriggerGainers1h] = useState<string[]>([])
	const [triggerLosers1h, setTriggerLosers1h] = useState<string[]>([])
	const [triggerGainers4h, setTriggerGainers4h] = useState<string[]>([])
	const [triggerLosers4h, setTriggerLosers4h] = useState<string[]>([])
	const [triggerGainers24h, setTriggerGainers24h] = useState<string[]>([])
	const [triggerLosers24h, setTriggerLosers24h] = useState<string[]>([])

	// ‚ñº –¢–æ–ø –º–æ–Ω–µ—Ç—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
	const [topGainers1h, setTopGainers1h] = useState<TimeframeCoin[]>([])
	const [topGainers5min, setTopGainers5min] = useState<TimeframeCoin[]>([])
	const [topLosers1h, setTopLosers1h] = useState<TimeframeCoin[]>([])
	const [topLosers5min, setTopLosers5min] = useState<TimeframeCoin[]>([])
	const [topGainers4h, setTopGainers4h] = useState<TimeframeCoin[]>([])
	const [topLosers4h, setTopLosers4h] = useState<TimeframeCoin[]>([])
	const [topGainers24h, setTopGainers24h] = useState<TimeframeCoin[]>([])
	const [topLosers24h, setTopLosers24h] = useState<TimeframeCoin[]>([])
	const [topVolume5min, setTopVolume5min] = useState<TimeframeCoin[]>([])
	const [topFunding5min, setTopFunding5min] = useState<TimeframeCoin[]>([])
	/**
	 * push ‚Äì —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
	 * –≤ ¬´—Å–∫–æ–ª—å–∑—è—â–µ–µ¬ª –æ–∫–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –∑–∞–ø–∏—Å–µ–π.
	 */
	const push = <T,>(setter: React.Dispatch<React.SetStateAction<T[]>>, item: T) => {
		setter(prev => [item, ...prev.slice(0, 99)])
	}

	/**
	 * setupSocket - create and configure socket connection
	 */
	const setupSocket = () => {
		if (socketRef.current) {
			console.log('üîÑ Cleaning up existing socket connection')
			socketRef.current.disconnect()
			socketRef.current = null
		}

		setConnectionStatus('connecting')
		console.log('üöÄ Connecting to WebSocket at:', SOCKET_URL)

		try {
			// Check URL for transport preference
			let transports = ['polling', 'websocket'] // Default to polling first

			// In browser environment, check for URL parameters
			if (typeof window !== 'undefined') {
				const urlParams = new URLSearchParams(window.location.search)
				const transportParam = urlParams.get('transport')

				if (transportParam === 'polling') {
					transports = ['polling'] // Force polling only
					console.log('üîß Using polling transport only (from URL parameter)')
				} else if (transportParam === 'websocket') {
					transports = ['websocket', 'polling'] // Try websocket first
					console.log('üîß Using websocket transport with polling fallback (from URL parameter)')
				}
			}

			// Force polling first, then try WebSocket
			// This is more reliable in environments where WebSockets might be blocked
			const socket: Socket = io(`${SOCKET_URL}/signals`, {
				transports,
				reconnectionAttempts: maxReconnectAttempts,
				reconnectionDelay: 1000,
				reconnectionDelayMax: 5000,
				timeout: 30000, // Longer timeout for initial connection
				path: '/socket.io',
				forceNew: true,
				upgrade: true, // Allow transport upgrade
				rejectUnauthorized: false, // Allow self-signed certificates
			})

			socketRef.current = socket

			/* === Events for connection state === */
			socket.on('connect', () => {
				console.log('‚úÖ WebSocket connected:', socket.id, 'Transport:', socket.io.engine.transport.name)
				setConnectionStatus('connected')
				reconnectAttemptsRef.current = 0

				// Log when transport changes (e.g., from polling to websocket)
				socket.io.engine.on('upgrade', () => {
					console.log('üîÑ Transport upgraded to:', socket.io.engine.transport.name)
				})
			})

			socket.on('connect_error', err => {
				console.error('‚ùå Socket connection error:', err.name, err.message)
				setConnectionStatus(`error: ${err.message}`)

				// Try alternate connection approach if specific errors
				if (err.message.includes('websocket error') || err.message.includes('xhr poll error')) {
					console.log('‚ö†Ô∏è WebSocket connection failed, trying different transport options')

					// If current socket fails with websocket error, try reconnecting with polling only
					if (socketRef.current) {
						socketRef.current.io.opts.transports = ['polling']
						console.log('üîÑ Forcing polling transport only')
					}
				}

				// Increment reconnect attempts
				reconnectAttemptsRef.current += 1

				if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
					console.error(`‚õî Maximum reconnection attempts (${maxReconnectAttempts}) reached. Please check your connection.`)
					setConnectionStatus('max_retries_reached')
				}
			})

			socket.on('disconnect', reason => {
				console.log('‚ö†Ô∏è Socket disconnected:', reason)
				setConnectionStatus(`disconnected: ${reason}`)

				// If not closed by client code, attempt manual reconnect
				if (reason === 'io server disconnect' || reason === 'transport close') {
					console.log('üîÅ Attempting manual reconnect...')
					setTimeout(() => {
						if (socketRef.current) {
							socketRef.current.connect()
						}
					}, 2000)
				}
			})

			socket.io.on('reconnect', attempt => {
				console.log(`‚úÖ Socket reconnected after ${attempt} attempts`)
				setConnectionStatus('connected')
			})

			socket.io.on('reconnect_attempt', attempt => {
				console.log(`üîÑ Socket reconnection attempt ${attempt}/${maxReconnectAttempts}`)
				setConnectionStatus(`reconnecting: attempt ${attempt}/${maxReconnectAttempts}`)
			})

			socket.io.on('reconnect_error', error => {
				console.error('‚ùå Socket reconnection error:', error)
				setConnectionStatus(`reconnect_error: ${error.message}`)
			})

			socket.io.on('reconnect_failed', () => {
				console.error('‚õî Socket reconnection failed after all attempts')
				setConnectionStatus('reconnect_failed')
			})

			/* === Market‚Äësignal handlers === */

			// 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å–ø–∞–π–∫–∏)
			socket.on('signal:volatility', (s: VolatilitySpikeSignal) => {
				if (s.type === 'volatilitySpike') push(setVolatilitySpikes, s)
			})
			socket.on('volatility', (s: VolatilitySpikeSignal) => push(setVolatilitySpikes, s))
			socket.on('volatilitySpike', (s: VolatilitySpikeSignal) => push(setVolatilitySpikes, s))

			// 2. –î–∏–∞–ø–∞–∑–æ–Ω‚Äë–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (high‚Äëlow range)
			socket.on('signal:volatilityRange', (s: VolatilitySpikeSignal) => push(setVolatilityRanges, s))
			socket.on('volatilityRange', (s: VolatilitySpikeSignal) => push(setVolatilityRanges, s))

			// 3. –û–±—ä—ë–º–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ & –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
			socket.on('volumeSpike', (s: VolumeSpikeSignal) => push(setVolumeSpikes, s))
			socket.on('priceChange', (s: PriceChangeSignal) => push(setPriceChanges, s))

			// 4. –¢–æ–ø‚Äë–≥–µ–π–Ω–µ—Ä—ã / –ª—É–∑–µ—Ä—ã (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
			socket.on('top:gainers', (d: TopGainersSignal | string[] | AnyObject) => {
				setTopGainers(parseSymbols(d))
			})
			socket.on('top:losers', (d: TopLosersSignal | string[] | AnyObject) => {
				setTopLosers(parseSymbols(d))
			})

			// 5. –¢–∞–π–º—Ñ—Ä–µ–π–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			socket.on('top:gainers:5min', (d: AnyObject) => {
				setTopGainers5min(parseTimeframeCoins(d))
			})
			socket.on('top:losers:5min', (d: AnyObject) => {
				setTopLosers5min(parseTimeframeCoins(d))
			})
			socket.on('top:volume:5min', (d: AnyObject) => {
				setTopVolume5min(parseTimeframeCoins(d))
			})
			socket.on('top:funding:5min', (d: AnyObject) => {
				setTopFunding5min(parseTimeframeCoins(d))
			})

			// Legacy event handlers - keep them for backwards compatibility
			socket.on('trigger:gainers-5min', (d: TopGainersSignal | string[] | AnyObject) => {
				setTopGainers5min(parseTimeframeCoins(d))
			})
			socket.on('trigger:losers-5min', (d: TopLosersSignal | string[] | AnyObject) => {
				setTopLosers5min(parseTimeframeCoins(d))
			})
			socket.on('trigger:volume-5min', (d: TopGainersSignal | string[] | AnyObject) => {
				setTopVolume5min(parseTimeframeCoins(d))
			})
			socket.on('trigger:funding-5min', (d: TopGainersSignal | string[] | AnyObject) => {
				setTopFunding5min(parseTimeframeCoins(d))
			})

			// 6. –¢—Ä–∏–≥–≥–µ—Ä‚Äë–∫–∞–Ω–∞–ª—ã –¥–ª—è 1h / 4h / 24h (—Å–∏–º–≤–æ–ª—ã‚Äë–∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
			socket.on('trigger:gainers-1h', d => setTriggerGainers1h(parseSymbols(d)))
			socket.on('trigger:losers-1h', d => setTriggerLosers1h(parseSymbols(d)))

			socket.on('trigger:gainers-4h', d => setTriggerGainers4h(parseSymbols(d)))
			socket.on('trigger:losers-4h', d => setTriggerLosers4h(parseSymbols(d)))

			socket.on('trigger:gainers-24h', d => setTriggerGainers24h(parseSymbols(d)))
			socket.on('trigger:losers-24h', d => setTriggerLosers24h(parseSymbols(d)))

			// 6. –¢–æ–ø –º–æ–Ω–µ—Ç—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
			socket.on('top:gainers:1h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìà Received top:gainers:1h:', data)
				setTopGainers1h(parseTimeframeCoins(data))
			})

			socket.on('top:losers:1h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìâ Received top:losers:1h:', data)
				setTopLosers1h(parseTimeframeCoins(data))
			})

			socket.on('top:gainers:4h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìà Received top:gainers:4h:', data)
				setTopGainers4h(parseTimeframeCoins(data))
			})

			socket.on('top:losers:4h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìâ Received top:losers:4h:', data)
				setTopLosers4h(parseTimeframeCoins(data))
			})

			socket.on('top:gainers:24h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìà Received top:gainers:24h:', data)
				setTopGainers24h(parseTimeframeCoins(data))
			})

			socket.on('top:losers:24h', (data: TimeframeSignal | AnyObject) => {
				console.log('üìâ Received top:losers:24h:', data)
				setTopLosers24h(parseTimeframeCoins(data))
			})

			/**
			 * Legacy handler: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç ¬´—Å—ã—Ä–æ–π¬ª kline‚Äë–æ–±—ä–µ–∫—Ç
			 * –æ—Ç Binance, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ VolatilitySpikeSignal.
			 */
			socket.on('binance:kline', raw => {
				if (!raw?.k) return
				const k = raw.k
				const volatility = ((parseFloat(k.h) - parseFloat(k.l)) / parseFloat(k.o)) * 100

				const sig: VolatilitySpikeSignal = {
					type: 'volatilityRange',
					symbol: k.s,
					interval: k.i,
					open: parseFloat(k.o),
					high: parseFloat(k.h),
					low: parseFloat(k.l),
					close: parseFloat(k.c),
					volatility: +volatility.toFixed(2),
					timestamp: k.t,
				}
				push(setVolatilityRanges, sig)
			})
		} catch (e: any) {
			console.error('‚ùå Socket initialization error:', e)
			setConnectionStatus(`init_error: ${e.message}`)
		}
	}

	// Initialize the socket connection when the component mounts
	useEffect(() => {
		setupSocket()

		// Cleanup when component unmounts
		return () => {
			if (socketRef.current) {
				console.log('üßπ Cleaning up socket connection on unmount')
				socketRef.current.disconnect()
				socketRef.current = null
			}
		}
	}, []) // Empty dependency array to run only once on mount

	/*********************************
	 * Helpers
	 *********************************/
	/**
	 * –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ¬´—Ç–æ–ø‚Äë–º–æ–Ω–µ—Ç¬ª –∏–∑ –±–µ–∫–µ–Ω–¥–∞:
	 * ‚Äì –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
	 * ‚Äì –æ–±—ä–µ–∫—Ç { payload: [...] }
	 * ‚Äì –æ–±—ä–µ–∫—Ç { coins: [...] } –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å string | {symbol}
	 */
	const parseSymbols = (data: any): string[] => {
		if (data && typeof data === 'object' && 'payload' in data && Array.isArray(data.payload)) {
			return data.payload.map((item: any) =>
				typeof item === 'string' ? item : (item as AnyObject).symbol || ''
			)
		}
		if (Array.isArray(data)) {
			return data.map(item => (typeof item === 'string' ? item : (item as AnyObject).symbol || ''))
		}
		if (data && typeof data === 'object' && Array.isArray((data as AnyObject).coins)) {
			return (data as AnyObject).coins.map((c: any) => (typeof c === 'string' ? c : c.symbol))
		}
		return []
	}

	/**
	 * –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º-–º–æ–Ω–µ—Ç: { type, payload: [{symbol, change}], timeframe }
	 */
	const parseTimeframeCoins = (data: any): TimeframeCoin[] => {
		// If the incoming data is an object with a payload array (new format)
		if (data && data.type && data.payload && Array.isArray(data.payload)) {
			return data.payload.map((item: any) => {
				// Handle funding data (new format)
				if (data.type === 'top:funding:5min' && item.symbol && item.rate && item.change) {
					return {
						symbol: item.symbol,
						change: item.rate,
						value: parseFloat(item.change)
					}
				}

				// Handle volume data (new format)
				if (data.type === 'top:volume:5min' && item.symbol && item.volume) {
					return {
						symbol: item.symbol,
						change: item.change || '0',
						value: parseFloat(item.volume),
						volume: typeof item.volume === 'number'
							? item.volume.toString()
							: item.volume || '0',
						volumePercent: typeof item.volumePercent === 'number'
							? item.volumePercent.toFixed(2)
							: typeof item.volumePercent === 'string'
								? item.volumePercent
								: '0.00',
						volume2Percent: typeof item.volume2Level === 'number'
							? item.volume2Level.toString()
							: typeof item.volume2Level === 'string'
								? item.volume2Level
								: '0',
						volume5Percent: typeof item.volume5Level === 'number'
							? item.volume5Level.toString()
							: typeof item.volume5Level === 'string'
								? item.volume5Level
								: '0',
						volume10Percent: typeof item.volume10Level === 'number'
							? item.volume10Level.toString()
							: typeof item.volume10Level === 'string'
								? item.volume10Level
								: '0'
					}
				}

				// Handle price change data (new format)
				if (data.type === 'top:gainers:5min' && item.symbol && item.change) {
					return {
						symbol: item.symbol,
						change: item.change
					}
				}

				// Handle volume and funding data with Symbol/Value format (old format)
				if (item.Symbol && item.Value !== undefined) {
					return {
						symbol: item.Symbol,
						change: item.Value.toString(),
						value: item.Value
					}
				}

				// Handle traditional timeframe data
				return {
					symbol: item.symbol || '',
					change: item.change || '0'
				}
			})
		}

		// If the incoming data is a TimeframeSignal
		if (data && data.type && data.payload && Array.isArray(data.payload)) {
			return data.payload
		}

		// If it's already an array of TimeframeCoins
		if (Array.isArray(data)) {
			return data
		}

		// Default empty array
		return []
	}

	/*********************************
	 * Return state to the component
	 *********************************/
	return {
		volatilitySpikes,
		volatilityRanges,
		volumeSpikes,
		priceChanges,
		topGainers,
		topLosers,
		triggerGainers1h,
		triggerLosers1h,
		triggerGainers4h,
		triggerLosers4h,
		triggerGainers24h,
		triggerLosers24h,
		topGainers1h,
		topLosers1h,
		topGainers4h,
		topLosers4h,
		topGainers24h,
		topLosers24h,
		topVolume5min,
		topFunding5min,
		topGainers5min,
		topLosers5min,
		connectionStatus
	}
}

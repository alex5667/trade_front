/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Market Regime —á–µ—Ä–µ–∑ WebSocket —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫
 * ------------------------------
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è useRegimeSocket —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
 * —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã. –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
 * 
 * –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É namespace (root), –Ω–µ –∫ /signals
 */

import { useCallback, useEffect, useRef, useState } from 'react'
import { Socket, io } from 'socket.io-client'

import { WEBSOCKET_CONFIG } from '@/config/websocket.config'
import { RegimeSignal } from '@/types/signal.types'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–µ–∂–∏–º—ã
 */
export interface RegimeSubscription {
	symbols: string[]
	timeframes: string[]
}

/**
 * –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
 */
export interface RegimeUpdateData extends RegimeSignal {
	symbol: string
	timeframe: string
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
 */
interface RegimeSubscribedResponse {
	symbols: string[]
	timeframes: string[]
	rooms: string[]
	timestamp: string
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
 */
interface RegimeConnectedResponse {
	clientId: string
	subscription: RegimeSubscription
	timestamp: string
}

/**
 * –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
 */
interface RegimeErrorResponse {
	message: string
	error?: string
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö—É–∫–∞
 */
interface UseRegimeSocketSubscriptionReturn {
	socket: Socket | null
	regimes: Map<string, RegimeUpdateData>
	latestRegime: RegimeUpdateData | null
	isConnected: boolean
	subscription: RegimeSubscription | null
	subscribe: (symbols: string[], timeframes: string[]) => void
	unsubscribe: () => void
	getRegime: (symbol: string, timeframe: string) => RegimeUpdateData | null
	error: string | null
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–∞
 */
const getRegimeKey = (symbol: string, timeframe: string): string => {
	return `${symbol}:${timeframe}`
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Market Regime —á–µ—Ä–µ–∑ WebSocket —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 * 
 * @example
 * ```tsx
 * const { regimes, subscribe, isConnected } = useRegimeSocketSubscription()
 * 
 * useEffect(() => {
 *   subscribe(['BTCUSDT', 'ETHUSDT'], ['M15', 'H4'])
 * }, [])
 * 
 * const btcRegime = regimes.get('BTCUSDT:M15')
 * ```
 */
export const useRegimeSocketSubscription = (): UseRegimeSocketSubscriptionReturn => {
	const [socket, setSocket] = useState<Socket | null>(null)
	const [regimes, setRegimes] = useState<Map<string, RegimeUpdateData>>(new Map())
	const [latestRegime, setLatestRegime] = useState<RegimeUpdateData | null>(null)
	const [isConnected, setIsConnected] = useState<boolean>(false)
	const [subscription, setSubscription] = useState<RegimeSubscription | null>(null)
	const [error, setError] = useState<string | null>(null)

	const socketRef = useRef<Socket | null>(null)

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	useEffect(() => {
		console.log('üîå Initializing Regime WebSocket connection...')
		console.log('üîß WebSocket URL:', WEBSOCKET_CONFIG.url)

		// –°–æ–∑–¥–∞–µ–º Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ root namespace (backend –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /signals)
		const socketInstance = io(WEBSOCKET_CONFIG.url, {
			path: '/socket.io',
			transports: ['websocket', 'polling'],
			reconnection: true,
			reconnectionAttempts: WEBSOCKET_CONFIG.maxReconnectAttempts,
			reconnectionDelay: WEBSOCKET_CONFIG.reconnectDelay,
			timeout: WEBSOCKET_CONFIG.connectionTimeout,
			autoConnect: true,
			forceNew: false,
		})

		socketRef.current = socketInstance
		setSocket(socketInstance)

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		socketInstance.on('connect', () => {
			console.log('‚úÖ Regime WebSocket connected successfully!')
			console.log('üì° Client ID:', socketInstance.id)
			console.log('üîó Transport:', socketInstance.io.engine.transport.name)
			setIsConnected(true)
			setError(null)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
		socketInstance.on('regime:connected', (data: RegimeConnectedResponse) => {
			console.log('üì° Regime connected with default subscription:', data)
			setSubscription(data.subscription)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
		socketInstance.on('disconnect', (reason: string) => {
			console.log('üî¥ Regime WebSocket disconnected:', reason)
			setIsConnected(false)

			// –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
			if (reason === 'io server disconnect') {
				console.warn('‚ö†Ô∏è Server disconnected the client, will try to reconnect')
			} else if (reason === 'io client disconnect') {
				console.log('‚ÑπÔ∏è Client disconnected intentionally')
			} else {
				console.warn('‚ö†Ô∏è Unexpected disconnect reason:', reason)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		socketInstance.on('connect_error', (err: Error) => {
			console.error('‚ùå Regime WebSocket connection error:')
			console.error('   Error type:', err.name)
			console.error('   Error message:', err.message)
			console.error('   Full error:', err)
			console.error('   Attempting to connect to:', WEBSOCKET_CONFIG.url)
			console.error('   Path:', '/socket.io')
			setIsConnected(false)
			setError(`Connection failed: ${err.message}. Please check if backend is running on port 4202.`)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
		socketInstance.on('regime:error', (data: RegimeErrorResponse) => {
			console.error('‚ùå Regime error:', data)
			setError(data.message)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Socket.IO
		socketInstance.on('error', (err: any) => {
			console.error('‚ùå Socket.IO error:', err)
			setError(`Socket error: ${err.message || err}`)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		socketInstance.on('regime:subscribed', (data: RegimeSubscribedResponse) => {
			console.log('‚úÖ Subscribed to regime updates:', data)
			setSubscription({
				symbols: data.symbols,
				timeframes: data.timeframes,
			})
			setError(null)
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏
		socketInstance.on('regime:unsubscribed', () => {
			console.log('‚úÖ Unsubscribed from regime updates')
			setSubscription(null)
		})

		// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ 'regime:update' (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
		socketInstance.on('regime:update', (data: RegimeUpdateData) => {
			if (data.symbol && data.timeframe) {
				const key = getRegimeKey(data.symbol, data.timeframe)
				console.log(`üìä Regime update received: ${key} -> ${data.regime}`)

				setRegimes(prev => {
					const updated = new Map(prev)
					updated.set(key, data)
					return updated
				})
				setLatestRegime(data)
			}
		})

		// Legacy: —Å–ª—É—à–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ 'regime' –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		socketInstance.on('regime', (data: RegimeUpdateData) => {
			if (data.symbol && data.timeframe) {
				const key = getRegimeKey(data.symbol, data.timeframe)
				console.log(`üìä Regime legacy update: ${key} -> ${data.regime}`)

				setRegimes(prev => {
					const updated = new Map(prev)
					updated.set(key, data)
					return updated
				})
				setLatestRegime(data)
			}
		})

		// Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		return () => {
			console.log('üîå Cleaning up regime socket connection')
			socketInstance.off('connect')
			socketInstance.off('disconnect')
			socketInstance.off('connect_error')
			socketInstance.off('regime:error')
			socketInstance.off('regime:connected')
			socketInstance.off('regime:subscribed')
			socketInstance.off('regime:unsubscribed')
			socketInstance.off('regime:update')
			socketInstance.off('regime')
			socketInstance.close()
			socketRef.current = null
		}
	}, [])

	/**
	 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
	 */
	const subscribe = useCallback((symbols: string[], timeframes: string[]) => {
		if (!socketRef.current || !socketRef.current.connected) {
			console.warn('‚ö†Ô∏è Cannot subscribe: socket not connected')
			setError('Socket not connected')
			return
		}

		if (symbols.length === 0) {
			console.warn('‚ö†Ô∏è Cannot subscribe: symbols array is empty')
			setError('Symbols array cannot be empty')
			return
		}

		if (timeframes.length === 0) {
			console.warn('‚ö†Ô∏è Cannot subscribe: timeframes array is empty')
			setError('Timeframes array cannot be empty')
			return
		}

		console.log(`üì° Subscribing to ${symbols.length} symbols x ${timeframes.length} timeframes`)
		socketRef.current.emit('regime:subscribe', { symbols, timeframes })
	}, [])

	/**
	 * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
	 */
	const unsubscribe = useCallback(() => {
		if (!socketRef.current || !socketRef.current.connected) {
			console.warn('‚ö†Ô∏è Cannot unsubscribe: socket not connected')
			return
		}

		console.log('üì° Unsubscribing from all regime updates')
		socketRef.current.emit('regime:unsubscribe')
		setRegimes(new Map()) // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		setLatestRegime(null)
	}, [])

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
	 */
	const getRegime = useCallback((symbol: string, timeframe: string): RegimeUpdateData | null => {
		const key = getRegimeKey(symbol, timeframe)
		return regimes.get(key) || null
	}, [regimes])

	return {
		socket,
		regimes,
		latestRegime,
		isConnected,
		subscription,
		subscribe,
		unsubscribe,
		getRegime,
		error,
	}
}


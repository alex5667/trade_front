/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
 * ------------------------------
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø-–≥–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–æ–ø-–ª—É–∑–µ—Ä–æ–≤ –∏–∑ Redux
 */

import { useMemo } from 'react'
import { useDispatch, useSelector } from 'react-redux'

import { signalApi } from '@/services/signal.api'
import { selectTimeframeData } from '@/store/signals/selectors/signals.selectors'
import type { AppDispatch } from '@/store/store'

export const useTimeframeData = () => {
	const dispatch = useDispatch<AppDispatch>()
	const timeframeData = useSelector(selectTimeframeData)
	const hasData = useMemo(() => (timeframeData.gainers.length + timeframeData.losers.length) > 0, [timeframeData])

	const refetch = () => {
		try {
			// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã RTK Query –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ
			dispatch(signalApi.util.invalidateTags(['Signal']))
			// –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ gainers/losers
			dispatch(signalApi.endpoints.getTopGainers.initiate(undefined, { forceRefetch: true }))
			dispatch(signalApi.endpoints.getTopLosers.initiate(undefined, { forceRefetch: true }))
			console.log('üîÑ Timeframe refetch triggered: top gainers/losers')
		} catch (e) {
			console.log('Refetch error (timeframe):', e)
		}
	}

	return {
		timeframeData,
		isLoading: false,
		error: null as string | null,
		refetch,
		hasData,
	}
} 
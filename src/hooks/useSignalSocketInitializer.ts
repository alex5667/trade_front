/**
 * –•—É–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
 * ------------------------------
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Redux store –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Socket.IO –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
 * –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–≤—è–∑–∏.
 */

import { useEffect, useRef } from 'react'
import { useDispatch } from 'react-redux'
import { io, Socket } from 'socket.io-client'

import { setConnectionStatus } from '@/store/signals/slices/connection.slice'
import {
	addTimeframeGainer,
	addTimeframeLoser
} from '@/store/signals/slices/timeframe.slice'
import { addTriggerEvent } from '@/store/signals/slices/trigger.slice'

import { TimeframeCoin, TriggerEvent } from '@/store/signals/signal.types'

/**
 * –•—É–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 * - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è 24h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
 * - –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ Redux
 * - –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export const useSignalSocketInitializer = () => {
	const dispatch = useDispatch()
	const socketRef = useRef<Socket | null>(null)
	const componentIdRef = useRef(`socket-init-${Date.now()}`)

	// URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
	const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || 'ws://localhost:3001'

	console.log(`üîå [${componentIdRef.current}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä WebSocket —Å–æ–∑–¥–∞–Ω`)

	useEffect(() => {
		console.log(`üöÄ [${componentIdRef.current}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		const socket = io(SOCKET_URL, {
			autoConnect: true,
			reconnection: true,
			reconnectionDelay: 1000,
			reconnectionDelayMax: 5000,
			reconnectionAttempts: 10,
			timeout: 20000
		})

		socketRef.current = socket

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		socket.on('connect', () => {
			console.log(`‚úÖ [${componentIdRef.current}] WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω (ID: ${socket.id})`)
			dispatch(setConnectionStatus(true))
		})

		socket.on('disconnect', (reason) => {
			console.log(`‚ùå [${componentIdRef.current}] WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${reason}`)
			dispatch(setConnectionStatus(false))
		})

		socket.on('connect_error', (error) => {
			console.error(`üî• [${componentIdRef.current}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, error)
			dispatch(setConnectionStatus(false))
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è 24h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
		socket
			.on('top:gainers:24h', (data: TimeframeCoin) => {
				console.log(`üìà [${componentIdRef.current}] –ü–æ–ª—É—á–µ–Ω top gainer 24h:`, data.symbol)
				dispatch(addTimeframeGainer({ timeframe: '24h', data }))
			})
			.on('top:losers:24h', (data: TimeframeCoin) => {
				console.log(`üìâ [${componentIdRef.current}] –ü–æ–ª—É—á–µ–Ω top loser 24h:`, data.symbol)
				dispatch(addTimeframeLoser({ timeframe: '24h', data }))
			})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è 24h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
		socket
			.on('trigger:gainers-24h', (data: string[]) => {
				console.log(`üîî [${componentIdRef.current}] –¢—Ä–∏–≥–≥–µ—Ä gainers 24h:`, data)
				const triggerEvent: TriggerEvent = {
					timeframe: '24h',
					type: 'gainers',
					data
				}
				dispatch(addTriggerEvent(triggerEvent))
			})
			.on('trigger:losers-24h', (data: string[]) => {
				console.log(`üîî [${componentIdRef.current}] –¢—Ä–∏–≥–≥–µ—Ä losers 24h:`, data)
				const triggerEvent: TriggerEvent = {
					timeframe: '24h',
					type: 'losers',
					data
				}
				dispatch(addTriggerEvent(triggerEvent))
			})

		// Cleanup —Ñ—É–Ω–∫—Ü–∏—è
		return () => {
			console.log(`üõë [${componentIdRef.current}] –û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`)
			if (socket) {
				socket.disconnect()
			}
		}
	}, [dispatch, SOCKET_URL])

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	return {
		isConnected: socketRef.current?.connected || false
	}
} 
import { websocketService } from '@/services/websocket.service'
import { useEffect, useRef, useState } from 'react'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
 */
export interface TradingSignal {
	type: string
	symbol?: string
	change?: number | string
	volatility?: number
	timeframe?: string
	payload?: any
	timestamp?: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export interface ConnectionStatus {
	connected: boolean
	clientId?: string
	transport?: string
	url: string
	reconnectAttempts?: number
}

/**
 * React Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ trade_back –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 */
export const useWebSocket = () => {
	const [isConnected, setIsConnected] = useState(false)
	const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
		connected: false,
		url: process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'http://localhost:4201'
	})
	const [lastSignal, setLastSignal] = useState<TradingSignal | null>(null)
	const [signalHistory, setSignalHistory] = useState<TradingSignal[]>([])
	const [error, setError] = useState<string | null>(null)

	// Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	const isConnecting = useRef(false)
	const subscriptionsRef = useRef<Map<string, (data: any) => void>>(new Map())

	/**
	 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
	 */
	const connect = async (): Promise<boolean> => {
		if (isConnecting.current || websocketService.isWebSocketConnected()) {
			return true
		}

		isConnecting.current = true
		setError(null)

		try {
			const success = await websocketService.connect()

			if (success) {
				setIsConnected(true)
				updateConnectionStatus()

				// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
				setupSubscriptions()

				console.log('‚úÖ WebSocket connected successfully in React hook')
			} else {
				setError('Failed to connect to WebSocket server')
				setIsConnected(false)
			}

			return success
		} catch (error) {
			console.error('WebSocket connection error:', error)
			setError(error instanceof Error ? error.message : 'Unknown connection error')
			setIsConnected(false)
			return false
		} finally {
			isConnecting.current = false
		}
	}

	/**
	 * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
	 */
	const disconnect = (): void => {
		try {
			// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
			subscriptionsRef.current.forEach((callback, eventType) => {
				websocketService.unsubscribe(eventType, callback)
			})
			subscriptionsRef.current.clear()

			// –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
			websocketService.disconnect()

			setIsConnected(false)
			setConnectionStatus(prev => ({ ...prev, connected: false, clientId: undefined }))

			console.log('üîå Disconnected from WebSocket')
		} catch (error) {
			console.error('Error during disconnect:', error)
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
	 */
	const setupSubscriptions = (): void => {
		// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
		const handleTradingSignal = (data: any) => {
			const signal: TradingSignal = {
				type: data.type || 'unknown',
				symbol: data.symbol || data.payload?.symbol,
				change: data.change || data.payload?.change,
				volatility: data.volatility || data.payload?.volatility,
				timeframe: data.timeframe,
				payload: data.payload || data,
				timestamp: data.timestamp || new Date().toISOString()
			}

			setLastSignal(signal)
			setSignalHistory(prev => [signal, ...prev.slice(0, 99)]) // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–≥–Ω–∞–ª–æ–≤
		}

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
		const eventTypes = [
			'volatility',
			'volatilityRange',
			'volatilitySpike',
			'top-gainers',
			'top-losers',
			'volume-signals',
			'funding-signals'
		]

		eventTypes.forEach(eventType => {
			const callback = (data: any) => {
				console.log(`üì® Received ${eventType} signal:`, data)
				handleTradingSignal({ ...data, type: eventType })
			}

			websocketService.subscribe(eventType, callback)
			subscriptionsRef.current.set(eventType, callback)
		})

		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
		const systemCallback = (data: any) => {
			console.log('‚ù§Ô∏è System health check received:', data)
			updateConnectionStatus()
		}

		websocketService.subscribe('system-health', systemCallback)
		subscriptionsRef.current.set('system-health', systemCallback)
	}

	/**
	 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	const updateConnectionStatus = (): void => {
		const stats = websocketService.getConnectionStats()
		setConnectionStatus({
			connected: stats.connected,
			clientId: stats.clientId,
			transport: stats.transport,
			url: stats.url
		})
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π
	 */
	const subscribe = (eventType: string, callback: (data: any) => void): (() => void) => {
		websocketService.subscribe(eventType, callback)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
		return () => {
			websocketService.unsubscribe(eventType, callback)
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	 */
	const emit = (eventName: string, data: any): void => {
		websocketService.emit(eventName, data)
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	const getStats = (): any => {
		return websocketService.getConnectionStats()
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
	 */
	const clearSignalHistory = (): void => {
		setSignalHistory([])
		setLastSignal(null)
	}

	/**
	 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	 */
	useEffect(() => {
		let mounted = true

		const autoConnect = async () => {
			if (mounted && !websocketService.isWebSocketConnected()) {
				await connect()
			}
		}

		autoConnect()

		// Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		return () => {
			mounted = false
			if (websocketService.isWebSocketConnected()) {
				disconnect()
			}
		}
	}, [])

	/**
	 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	useEffect(() => {
		const interval = setInterval(() => {
			const connected = websocketService.isWebSocketConnected()
			if (connected !== isConnected) {
				setIsConnected(connected)
				updateConnectionStatus()
			}
		}, 5000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

		return () => clearInterval(interval)
	}, [isConnected])

	return {
		// –°–æ—Å—Ç–æ—è–Ω–∏–µ
		isConnected,
		connectionStatus,
		lastSignal,
		signalHistory,
		error,

		// –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
		connect,
		disconnect,

		// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
		subscribe,
		emit,

		// –£—Ç–∏–ª–∏—Ç—ã
		getStats,
		clearSignalHistory
	}
}

/**
 * Hook –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤
 */
export const useSignalSubscription = (eventType: string, callback: (data: any) => void) => {
	useEffect(() => {
		const unsubscribe = websocketService.subscribe ?
			(() => {
				websocketService.subscribe(eventType, callback)
				return () => websocketService.unsubscribe(eventType, callback)
			})() :
			undefined

		return unsubscribe
	}, [eventType, callback])
}

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–æ–ø-–ª–∏—Å—Ç–æ–≤
 */
export const useTopLists = () => {
	const [topGainers, setTopGainers] = useState<any[]>([])
	const [topLosers, setTopLosers] = useState<any[]>([])
	const [lastUpdate, setLastUpdate] = useState<string | null>(null)

	useEffect(() => {
		const handleTopGainers = (data: any) => {
			setTopGainers(data.payload || data)
			setLastUpdate(new Date().toISOString())
		}

		const handleTopLosers = (data: any) => {
			setTopLosers(data.payload || data)
			setLastUpdate(new Date().toISOString())
		}

		websocketService.subscribe('top-gainers', handleTopGainers)
		websocketService.subscribe('top-losers', handleTopLosers)

		return () => {
			websocketService.unsubscribe('top-gainers', handleTopGainers)
			websocketService.unsubscribe('top-losers', handleTopLosers)
		}
	}, [])

	return {
		topGainers,
		topLosers,
		lastUpdate
	}
} 
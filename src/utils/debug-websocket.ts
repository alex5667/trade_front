/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö Volatility Range
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:
 * ```javascript
 * import { debugWebSocket } from '@/utils/debug-websocket'
 * debugWebSocket.checkAll()
 * ```
 * 
 * –ò–ª–∏ —á–µ—Ä–µ–∑ window (–µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ):
 * ```javascript
 * window.__debugWS()
 * ```
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function checkWebSocketConnection() {
	console.log('=== üîå WebSocket Connection Status ===')

	if (typeof window === 'undefined') {
		console.log('‚ùå Not running in browser environment')
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ window.__socketStats
	const stats = (window as any).__socketStats?.()
	if (stats) {
		console.log('‚úÖ Socket Stats:', stats)
		console.log(`Connected: ${stats.connected ? '‚úÖ' : '‚ùå'}`)
		console.log(`Connecting: ${stats.isConnecting ? '‚è≥' : '‚úÖ'}`)
		console.log(`Reconnect Attempts: ${stats.reconnectAttempts}`)
		console.log(`URL: ${stats.url}`)
	} else {
		console.log('‚ùå Socket stats not available. WebSocket might not be initialized.')
	}
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Redux Store
 */
export function checkReduxStore() {
	console.log('\n=== üì¶ Redux Store Data ===')

	if (typeof window === 'undefined') {
		console.log('‚ùå Not running in browser environment')
		return
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å store –∏–∑ Redux DevTools
	const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__
	const store = (window as any).store

	let state: any = null

	if (devTools) {
		try {
			// Redux DevTools Extension API
			const instances = devTools.instances
			if (instances && instances.size > 0) {
				const firstInstance = Array.from(instances.values())[0] as any
				state = firstInstance.getState?.()
			}
		} catch (e) {
			console.log('‚ö†Ô∏è Could not get state from Redux DevTools:', e)
		}
	}

	if (!state && store?.getState) {
		state = store.getState()
	}

	if (!state) {
		console.log('‚ùå Redux store not accessible. Make sure Redux DevTools is installed or store is exposed to window.')
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
	const volatilityRange = state.volatilityRange
	const volatilitySpike = state.volatilitySpike
	const connection = state.connection

	console.log('Connection State:', connection)
	console.log(`Is Connected: ${connection?.isConnected ? '‚úÖ' : '‚ùå'}`)
	console.log(`Connection Error: ${connection?.lastError || 'None'}`)

	console.log('\nVolatility Range Signals:')
	console.log(`  Count: ${volatilityRange?.signals?.length || 0}`)
	console.log(`  Last Updated: ${volatilityRange?.lastUpdated ? new Date(volatilityRange.lastUpdated).toLocaleString() : 'Never'}`)
	if (volatilityRange?.signals?.length > 0) {
		console.log('  Latest signals:', volatilityRange.signals.slice(0, 3))
	} else {
		console.log('  ‚ö†Ô∏è No signals in store')
	}

	console.log('\nVolatility Spike Signals:')
	console.log(`  Count: ${volatilitySpike?.signals?.length || 0}`)
	console.log(`  Last Updated: ${volatilitySpike?.lastUpdated ? new Date(volatilitySpike.lastUpdated).toLocaleString() : 'Never'}`)

	return state
}

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function listenForSignals() {
	console.log('\n=== üëÇ Setting Up Signal Listeners ===')

	if (typeof window === 'undefined') {
		console.log('‚ùå Not running in browser environment')
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å socket client
	let client: any = null

	// –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ window.__socketClient
	if ((window as any).__socketClient) {
		client = (window as any).__socketClient
	}

	// –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
	if (!client && typeof require !== 'undefined') {
		try {
			const { getSocketIOClient } = require('@/services/socket-io.service')
			client = getSocketIOClient()
		} catch (e) {
			console.log('‚ö†Ô∏è Could not import socket client:', e)
		}
	}

	if (!client) {
		console.log('‚ùå Socket client not available')
		return
	}

	console.log('‚úÖ Socket client found, setting up listeners...')

	const events = [
		'volatilityRange',
		'signal:volatilityRange',
		'volatilitySpike',
		'signal:volatility',
		'stream:volatilityRange'
	]

	events.forEach(eventName => {
		client.on(eventName, (data: any) => {
			console.log(`\nüî• [DEBUG] Received ${eventName}:`, data)
			console.log(`  Symbol: ${data?.symbol}`)
			console.log(`  Type: ${data?.type}`)
			console.log(`  Timestamp: ${data?.timestamp || data?.receivedAt}`)
		})
	})

	console.log(`‚úÖ Listening for events: ${events.join(', ')}`)
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
 */
export function sendTestPing() {
	console.log('\n=== üèì Sending Test Ping ===')

	if (typeof window === 'undefined') {
		console.log('‚ùå Not running in browser environment')
		return
	}

	const client = (window as any).__socketClient
	if (!client) {
		console.log('‚ùå Socket client not available')
		return
	}

	client.emit('ping', { timestamp: Date.now() })
	console.log('‚úÖ Ping sent. Check for pong response in logs.')
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function checkAll() {
	console.clear()
	console.log('üîç Starting WebSocket Debug Check...\n')

	checkWebSocketConnection()
	const state = checkReduxStore()
	listenForSignals()
	sendTestPing()

	console.log('\n=== üìã Summary ===')
	console.log('Check the logs above for any issues.')
	console.log('If no signals are coming in:')
	console.log('1. Check backend is running on http://localhost:4202')
	console.log('2. Check backend is emitting volatilityRange events')
	console.log('3. Check Network tab for WebSocket messages')
	console.log('4. Check browser console for errors')

	return state
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ window
export const debugWebSocket = {
	checkWebSocketConnection,
	checkReduxStore,
	listenForSignals,
	sendTestPing,
	checkAll
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —á–µ—Ä–µ–∑ window –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
if (typeof window !== 'undefined') {
	; (window as any).__debugWS = checkAll
		; (window as any).__debugWebSocket = debugWebSocket
}


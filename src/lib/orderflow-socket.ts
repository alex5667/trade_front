/**
 * Order Flow Socket.IO
 * --------------------------------
 * WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Order Flow –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
'use client'

import { io, Socket } from 'socket.io-client'

const OF_SOCKET_URL = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8080'

let orderFlowSocket: Socket | null = null

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Order Flow Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
 * @returns Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è Order Flow –¥–∞–Ω–Ω—ã—Ö
 */
export function getOrderFlowSocket(): Socket {
	if (typeof window === 'undefined') {
		// –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
		return {} as Socket
	}

	if (!orderFlowSocket) {
		console.log(`üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Order Flow Socket.IO: ${OF_SOCKET_URL}/signals`)

		orderFlowSocket = io(`${OF_SOCKET_URL}/signals`, {
			transports: ['websocket', 'polling'],
			autoConnect: true,
			reconnection: true,
			reconnectionDelay: 2000,
			reconnectionAttempts: 10
		})

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		orderFlowSocket.on('connect', () => {
			console.log('‚úÖ Order Flow Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω, ID:', orderFlowSocket?.id)
		})

		orderFlowSocket.on('disconnect', (reason) => {
			console.log('‚ö†Ô∏è Order Flow Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞:', reason)
		})

		orderFlowSocket.on('connect_error', (error) => {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Order Flow Socket.IO:', error.message)
		})
	}

	return orderFlowSocket
}

/**
 * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç Order Flow Socket.IO
 */
export function disconnectOrderFlowSocket(): void {
	if (orderFlowSocket) {
		console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Order Flow Socket.IO...')
		orderFlowSocket.disconnect()
		orderFlowSocket = null
	}
}


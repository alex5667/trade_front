/**
 * –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
 * ------------------------------
 * –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
 * –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ Redux —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 * - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Redux
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
'use client'

import {
	AnyObject,
	PriceChangeSignal,
	VolatilitySignal,
	VolumeSignal
} from '@/store/signals/signal.types'
import {
	connected,
	connecting,
	disconnected,
	setConnectionError
} from '@/store/signals/slices/connection.slice'
import { addPriceChangeSignal } from '@/store/signals/slices/price-change.slice'
import {
	replaceTimeframeGainers,
	replaceTimeframeLosers
} from '@/store/signals/slices/timeframe.slice'
import { addVolatilityRangeSignal } from '@/store/signals/slices/volatility-range.slice'
import { addVolatilitySpikeSignal } from '@/store/signals/slices/volatility-spike.slice'
import { addVolatilitySignal } from '@/store/signals/slices/volatility.slice'
import { addVolumeSignal } from '@/store/signals/slices/volume.slice'
import {
	parseTimeframeCoins
} from '@/store/signals/utils/signal-parsers'
import { AppDispatch } from '@/store/store'
import { getSocketIOClient } from './socket-io.service'

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * 
 * –ü—Ä–∏–≤–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
 * –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redux —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
 * 
 * @param signal - –ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
 */
const normalizeVolatilitySignal = (signal: any): VolatilitySignal => {
	const normalizedSignal = { ...signal }

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø 'volatility' –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	if (signal.type === 'volatilitySpike' || signal.type === 'volatilityRange') {
		normalizedSignal.type = 'volatility'
		normalizedSignal.signalType = signal.type
	}

	// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
	if (!normalizedSignal.volatilityChange && normalizedSignal.volatility) {
		normalizedSignal.volatilityChange = 0
	}

	return normalizedSignal as VolatilitySignal
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–∏–≥–Ω–∞–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 */
const createSignalId = (signal: VolatilitySignal): string => {
	if (!signal || !signal.symbol || !signal.timestamp) {
		return `${Date.now()}-${Math.random()}`
	}

	// –°–æ–∑–¥–∞–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤ —Å–∏–≥–Ω–∞–ª–∞
	return `${signal.type}-${signal.symbol}-${signal.interval}-${signal.timestamp}`
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ ID –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
 * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π slice –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
 */
const handleVolatilitySignal = (dispatch: AppDispatch) => (signal: any) => {
	if (!signal) return

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
	const normalizedSignal = normalizeVolatilitySignal(signal)
	const signalId = createSignalId(normalizedSignal)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
	if (processedSignals.has(signalId)) {
		console.log(`–°–∏–≥–Ω–∞–ª ${signalId} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
	processedSignals.add(signalId)

	console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: ${normalizedSignal.symbol} (${normalizedSignal.signalType || normalizedSignal.type})`)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π slice –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
	switch (normalizedSignal.signalType) {
		case 'volatilitySpike':
			console.log(`üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º volatilitySpike —Å–∏–≥–Ω–∞–ª –¥–ª—è ${normalizedSignal.symbol}`)
			dispatch(addVolatilitySpikeSignal(normalizedSignal))
			break
		case 'volatilityRange':
			console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º volatilityRange —Å–∏–≥–Ω–∞–ª –¥–ª—è ${normalizedSignal.symbol}`)
			dispatch(addVolatilityRangeSignal(normalizedSignal))
			break
		default:
			// –î–ª—è –æ–±—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π slice
			console.log(`‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π volatility —Å–∏–≥–Ω–∞–ª –¥–ª—è ${normalizedSignal.symbol}`)
			dispatch(addVolatilitySignal(normalizedSignal))
			break
	}
}

/** –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è */
const processedSignals = new Set<string>()

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
 * 
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 * –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ Redux —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã
 * —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 * 
 * @param dispatch - –§—É–Ω–∫—Ü–∏—è dispatch –∏–∑ Redux –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
 * @returns –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export const initializeSignalService = (dispatch: AppDispatch) => {
	const client = getSocketIOClient()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	dispatch(connecting())

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	client.on('connect', () => {
		console.log('–°–µ—Ä–≤–∏—Å —Å–∏–≥–Ω–∞–ª–æ–≤: Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º Redux —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')
		dispatch(connected())
		// –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
		processedSignals.clear()
	})

	client.on('disconnect', () => {
		console.log('–°–µ—Ä–≤–∏—Å —Å–∏–≥–Ω–∞–ª–æ–≤: Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º Redux —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')
		dispatch(disconnected())
	})

	client.on('error', (errorData: any) => {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π, —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–æ–∫
		let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Socket.IO'

		if (typeof errorData === 'string') {
			errorMessage = errorData
		} else if (errorData?.message) {
			errorMessage = errorData.message
			// –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
			if (errorData.details) {
				console.error('–°–µ—Ä–≤–∏—Å —Å–∏–≥–Ω–∞–ª–æ–≤: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Socket.IO:', errorData.details)
			}
		} else if (errorData instanceof Error) {
			errorMessage = errorData.message
		}

		console.error('–°–µ—Ä–≤–∏—Å —Å–∏–≥–Ω–∞–ª–æ–≤: –û—à–∏–±–∫–∞ Socket.IO -', errorMessage)
		dispatch(setConnectionError(errorMessage))
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
	client.on('signal:volatility', handleVolatilitySignal(dispatch))
	client.on('volatilitySpike', handleVolatilitySignal(dispatch))
	client.on('volatility', handleVolatilitySignal(dispatch))
	client.on('signal:volatilityRange', handleVolatilitySignal(dispatch))
	client.on('volatilityRange', handleVolatilitySignal(dispatch))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—ä–µ–º–∞
	client.on('volumeSpike', (signal: VolumeSignal) => {
		dispatch(addVolumeSignal(signal))
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
	client.on('priceChange', (signal: PriceChangeSignal) => {
		dispatch(addPriceChangeSignal(signal))
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–≤ (–±–µ–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)
	client.on('top:gainers', (data: AnyObject) => {
		const coins = parseTimeframeCoins(data)
		dispatch(replaceTimeframeGainers({ data: coins }))
	})

	client.on('top:losers', (data: AnyObject) => {
		const coins = parseTimeframeCoins(data)
		dispatch(replaceTimeframeLosers({ data: coins }))
	})


	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É
	client.connect()

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
	return () => {
		client.disconnect()
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 * —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 * 
 * @returns 'connected' –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, 'disconnected' –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
 */
export const getConnectionStatus = () => {
	const client = getSocketIOClient()
	return client.isActive() ? 'connected' : 'disconnected'
} 
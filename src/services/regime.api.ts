/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Market Regime endpoints
 * ------------------------------
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */

import { API_BASE_URL } from '@/config/api.config'
import { RegimeQuantiles, RegimeSnapshot, RegimeSnapshotParams } from '@/types/signal.types'
import {
	generateMockContext,
	generateMockHealth,
	generateMockQuantiles,
	generateMockSeries,
	generateMockSnapshot
} from './regime.mock'

// –†–µ–∂–∏–º mock –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ backend)
const USE_MOCK_DATA = process.env.NEXT_PUBLIC_USE_MOCK_DATA === 'true'

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ —Å JSON –æ—Ç–≤–µ—Ç–æ–º
 */
async function getJSON<T>(url: string): Promise<T> {
	try {
		const res = await fetch(url, { 
			cache: 'no-store',
			headers: {
				'Content-Type': 'application/json',
			}
		})
		
		if (!res.ok) {
			const errorText = await res.text()
			throw new Error(`HTTP ${res.status}: ${errorText}`)
		}
		
		return res.json()
	} catch (error) {
		// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		if (error instanceof TypeError && error.message.includes('fetch')) {
			throw new Error(
				`Network error: Cannot reach ${API_BASE_URL}. ` +
				`–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NEXT_PUBLIC_API_BASE_URL.`
			)
		}
		throw error
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∞–ø—à–æ—Ç —Ä–µ–∂–∏–º–∞
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1m", "5m", "1h")
 */
export const fetchRegimeLatest = async (symbol: string, timeframe: string): Promise<RegimeSnapshot> => {
	if (USE_MOCK_DATA) {
		console.log('üé≠ Mock: fetchRegimeLatest')
		return Promise.resolve(generateMockSnapshot(symbol, timeframe))
	}

	try {
		return await getJSON<RegimeSnapshot>(
			`${API_BASE_URL}/regime/snapshot/latest?symbol=${symbol}&timeframe=${timeframe}`
		)
	} catch (error) {
		console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
		return generateMockSnapshot(symbol, timeframe)
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ä–µ–∂–∏–º–∞ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns –ú–∞—Å—Å–∏–≤ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ —Ä–µ–∂–∏–º–∞
 */
export const fetchRegimeRange = async (params: RegimeSnapshotParams): Promise<RegimeSnapshot[]> => {
	if (USE_MOCK_DATA) {
		console.log('üé≠ Mock: fetchRegimeRange')
		const points = params.limit || 100
		return Promise.resolve(generateMockSeries(params.symbol, params.timeframe, points))
	}

	try {
		const queryParams = new URLSearchParams({
			symbol: params.symbol,
			timeframe: params.timeframe,
		})
		
		if (params.from) queryParams.set('from', params.from)
		if (params.to) queryParams.set('to', params.to)
		if (params.limit) queryParams.set('limit', String(params.limit))
		
		return await getJSON<RegimeSnapshot[]>(
			`${API_BASE_URL}/regime/snapshot/range?${queryParams.toString()}`
		)
	} catch (error) {
		console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
		const points = params.limit || 100
		return generateMockSeries(params.symbol, params.timeframe, points)
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–≤–∞–Ω—Ç–∏–ª–∏ ADX/ATR% –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º
 */
export const fetchRegimeQuantiles = async (symbol: string, timeframe: string): Promise<RegimeQuantiles> => {
	if (USE_MOCK_DATA) {
		console.log('üé≠ Mock: fetchRegimeQuantiles')
		return Promise.resolve(generateMockQuantiles(symbol, timeframe))
	}

	try {
		return await getJSON<RegimeQuantiles>(
			`${API_BASE_URL}/regime/quantiles?symbol=${symbol}&timeframe=${timeframe}`
		)
	} catch (error) {
		console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
		return generateMockQuantiles(symbol, timeframe)
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∂–∏–º–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º
 * @param hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
 */
export const fetchRegimeHistory = async (
	symbol: string,
	timeframe: string,
	hours: number = 24
): Promise<RegimeSnapshot[]> => {
	const to = new Date()
	const from = new Date(to.getTime() - hours * 60 * 60 * 1000)

	return fetchRegimeRange({
		symbol,
		timeframe,
		from: from.toISOString(),
		to: to.toISOString(),
	})
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º
 * @param maxLagSec - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 180)
 */
export const fetchRegimeHealth = async (
	symbol: string,
	timeframe: string,
	maxLagSec: number = 180
) => {
	if (USE_MOCK_DATA) {
		console.log('üé≠ Mock: fetchRegimeHealth')
		return Promise.resolve(generateMockHealth(symbol, timeframe))
	}

	try {
		return await getJSON(
			`${API_BASE_URL}/regime/health?symbol=${symbol}&timeframe=${timeframe}&maxLagSec=${maxLagSec}`
		)
	} catch (error) {
		console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
		return generateMockHealth(symbol, timeframe)
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º
 * @param hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
 */
export const fetchRegimeAggHourly = (
	symbol: string,
	timeframe: string,
	hours: number = 24
) => {
	return getJSON(
		`${API_BASE_URL}/regime/agg/hourly?symbol=${symbol}&timeframe=${timeframe}&hours=${hours}`
	)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
 * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param timeframe - –¢–∞–π–º—Ñ—Ä–µ–π–º
 * @param days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 14)
 */
export const fetchRegimeAggDaily = (
	symbol: string,
	timeframe: string,
	days: number = 14
) => {
	return getJSON(
		`${API_BASE_URL}/regime/agg/daily?symbol=${symbol}&timeframe=${timeframe}&days=${days}`
	)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ (LTF + HTF) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–ø—É—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const fetchRegimeContext = async (params: {
	symbol: string
	ltf: string
	htf: string
	signalType?: string
	side?: 'long' | 'short'
}) => {
	if (USE_MOCK_DATA) {
		console.log('üé≠ Mock: fetchRegimeContext')
		return Promise.resolve(
			generateMockContext(params.symbol, params.ltf, params.htf, params.signalType, params.side)
		)
	}

	try {
		const queryParams = new URLSearchParams({
			symbol: params.symbol,
			ltf: params.ltf,
			htf: params.htf,
		})
		
		if (params.signalType) queryParams.set('signalType', params.signalType)
		if (params.side) queryParams.set('side', params.side)
		
		return await getJSON(
			`${API_BASE_URL}/regime/context?${queryParams.toString()}`
		)
	} catch (error) {
		console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
		return generateMockContext(params.symbol, params.ltf, params.htf, params.signalType, params.side)
	}
}


/**
 * –°–µ—Ä–≤–∏—Å Socket.IO
 * ------------------------------
 * –°–µ—Ä–≤–∏—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±—ç–∫–µ–Ω–¥–æ–º
 * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–±—ã—Ç–∏—è –≤ Redux-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–≤—è–∑–∏
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
 */
'use client'

import { logWebSocketConfig, WEBSOCKET_CONFIG } from '@/config/websocket.config'
import { io, Socket } from 'socket.io-client'

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π stringify –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ—à–∏–±–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
const getCircularReplacer = () => {
	const seen = new WeakSet()
	return (_key: string, value: any) => {
		if (typeof value === 'object' && value !== null) {
			if (seen.has(value)) return '[Circular]'
			seen.add(value)
		}
		return value
	}
}

const safeStringify = (value: unknown, space: number = 2) => {
	try {
		return JSON.stringify(value, getCircularReplacer(), space)
	} catch (_err) {
		return '[Unserializable]'
	}
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const SOCKET_URL = WEBSOCKET_CONFIG.url.replace('ws://', 'http://').replace('wss://', 'https://')
const MAX_RECONNECT_ATTEMPTS = WEBSOCKET_CONFIG.maxReconnectAttempts
const RECONNECT_DELAY = WEBSOCKET_CONFIG.reconnectDelay

/**
 * –ö–ª–∞—Å—Å Socket.IO –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
 * –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ
 * —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 */
export class TradeSignalSocketIOClient {
	/** –ë–∞–∑–æ–≤—ã–π URL Socket.IO —Å–µ—Ä–≤–µ—Ä–∞ */
	private baseUrl: string

	/** –≠–∫–∑–µ–º–ø–ª—è—Ä Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */
	private socket: Socket | null

	/** –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */
	private isConnected: boolean

	/** –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
	private reconnectAttempts: number

	/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
	private maxReconnectAttempts: number

	/** –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º—Å) */
	private reconnectDelay: number

	/** –û–±—ä–µ–∫—Ç —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π */
	private callbacks: Record<string, Function[]>

	/** –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
	private isConnecting: boolean = false

	/**
	 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Socket.IO –∫–ª–∏–µ–Ω—Ç–∞
	 * 
	 * @param baseUrl - URL Socket.IO —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
	 */
	constructor(baseUrl = SOCKET_URL) {
		console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO –∫–ª–∏–µ–Ω—Ç–∞ —Å URL: ${baseUrl}`)
		logWebSocketConfig()

		this.baseUrl = baseUrl
		this.socket = null
		this.isConnected = false
		this.reconnectAttempts = 0
		this.maxReconnectAttempts = MAX_RECONNECT_ATTEMPTS
		this.reconnectDelay = RECONNECT_DELAY

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
		this.callbacks = {

			'signal:volatility': [], // –°–∏–≥–Ω–∞–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'signal:volatilityRange': [], // –°–∏–≥–Ω–∞–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volatilitySpike': [], // –í—Å–ø–ª–µ—Å–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volatilityRange': [], // –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volumeSpike': [], // –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞
			'priceChange': [], // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
			'top:gainers': [], // –õ—É—á—à–∏–µ —Ä–∞—Å—Ç—É—â–∏–µ (–æ–±—â–∏–µ)
			'top:losers': [], // –•—É–¥—à–∏–µ –ø–∞–¥–∞—é—â–∏–µ (–æ–±—â–∏–µ)

			'connect': [], // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			'disconnect': [], // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
			'error': [], // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
			'pong': [] // –°–æ–±—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥
		}
	}

	/**
	 * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É
	 * 
	 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Socket.IO —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
	 * –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π. –í–∫–ª—é—á–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
	 * –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
	 */
	connect() {
		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		if (this.isConnecting) {
			console.log('–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å')
			return
		}

		// –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ —Å–æ–∫–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
		if (this.isConnected && this.socket && this.socket.connected) {
			console.log('Socket.IO —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ connect')
			return
		}

		this.isConnecting = true

		// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
		if (this.socket) {
			console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Socket.IO —Å–æ–∫–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')
			try {
				this.socket.disconnect()
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Socket.IO —Å–æ–∫–µ—Ç–∞:', err)
			}
			this.socket = null
		}

		try {
			console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∞–¥—Ä–µ—Å—É ${this.baseUrl}...`)

			// –°–æ–∑–¥–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
			this.socket = io(this.baseUrl, {
				autoConnect: true,
				reconnection: true,
				reconnectionDelay: this.reconnectDelay,
				reconnectionDelayMax: this.reconnectDelay * 2,
				reconnectionAttempts: this.maxReconnectAttempts,
				timeout: 20000,
				transports: ['websocket', 'polling'],
				path: '/socket.io',
				withCredentials: true
			})

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			this.socket.on('connect', () => {
				console.log('‚úÖ Socket.IO —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω, ID:', this.socket?.id)
				this.isConnected = true
				this.isConnecting = false
				this.reconnectAttempts = 0
				this._emitEvent('connect')
			})

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
			this.socket.on('disconnect', (reason) => {
				console.log('‚ö†Ô∏è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø—Ä–∏—á–∏–Ω–∞:', reason)
				this.isConnected = false
				this.isConnecting = false
				this._emitEvent('disconnect')
			})

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			this.socket.on('connect_error', (error: any) => {
				// –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ä–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ stringify
				const errorInfo = {
					timestamp: new Date().toISOString(),
					url: this.baseUrl,
					isConnecting: this.isConnecting,
					reconnectAttempts: this.reconnectAttempts,
					navigatorOnline: typeof navigator !== 'undefined' ? navigator.onLine : undefined,
					errorMessage: error?.message || String(error) || 'Unknown Socket.IO connection error',
					errorName: error?.name || error?.type || 'SocketError',
					errorCode: error?.code || (error?.data && error?.data.code) || 'UNKNOWN',
					errorDescription: error?.description || (error?.data && error?.data.description) || undefined,
					errorStack: error?.stack,
					errorRawType: Object.prototype.toString.call(error),
					errorStringified: safeStringify(error)
				}

				console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO:', errorInfo)
				console.error('‚ùå Socket.IO connect_error JSON:', safeStringify(errorInfo))

				this.isConnecting = false
				this._emitEvent('error', {
					message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO',
					details: errorInfo
				})
			})

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pong –æ—Ç–≤–µ—Ç–æ–≤
			this.socket.on('pong', (data) => {
				console.log('üì® –ü–æ–ª—É—á–µ–Ω pong –æ—Ç Socket.IO —Å–µ—Ä–≤–µ—Ä–∞:', data)
				this._emitEvent('pong', data)
			})

			// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
			this._setupSignalHandlers()

		} catch (error) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			const errorInfo = {
				timestamp: new Date().toISOString(),
				url: this.baseUrl,
				isConnecting: this.isConnecting,
				reconnectAttempts: this.reconnectAttempts,
				errorMessage: error instanceof Error ? error.message : String(error),
				errorName: error instanceof Error ? error.name : 'Unknown',
				errorStack: error instanceof Error ? error.stack : undefined
			}

			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', errorInfo)

			this.isConnecting = false
			this._emitEvent('error', {
				message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
				details: errorInfo
			})
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
	 * @private
	 */
	private _setupSignalHandlers() {
		if (!this.socket) return

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤
		const signalTypes = [
			'signal:volatility',
			'signal:volatilityRange',
			'volatilitySpike',
			'volatilityRange',
			'volumeSpike',
			'priceChange',
			'top:gainers',
			'top:losers',

		]

		signalTypes.forEach(signalType => {
			this.socket?.on(signalType, (data) => {
				console.log(`üì® –ü–æ–ª—É—á–µ–Ω Socket.IO —Å–∏–≥–Ω–∞–ª ${signalType}:`, data)
				this._emitEvent(signalType, data)
			})
		})

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å Redis Streams
		// –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∏—Ö –≤ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ–±—ã—Ç–∏—è (–∞–ª–∏–∞—Å—ã)
		const redisEventAliases: Record<string, string[]> = {
			'stream:top-gainers': ['top:gainers'],
			'stream:top-losers': ['top:losers'],
			'stream:volume-signals': ['volumeSpike', 'volume-signals'],
			'stream:funding-signals': ['funding', 'funding-signals'],
			'stream:volatility': ['signal:volatility', 'volatility', 'volatilitySpike'],
			'stream:volatilityRange': ['signal:volatilityRange', 'volatilityRange'],
			'stream:volatilitySpike': ['volatilitySpike']
		}

		Object.entries(redisEventAliases).forEach(([redisEvent, aliases]) => {
			this.socket?.on(redisEvent, (data) => {
				console.log(`üì® –ü–æ–ª—É—á–µ–Ω Redis-–∫–∞–Ω–∞–ª ${redisEvent}:`, data)
				// –≠–º–∏—Ç–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è
				this._emitEvent(redisEvent, data)
				// –ò –∞–ª–∏–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–ª—É—à–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
				aliases.forEach((alias) => this._emitEvent(alias, data))
			})
		})
	}

	/**
	 * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
	 */
	disconnect() {
		if (this.socket) {
			console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Socket.IO...')
			this.socket.disconnect()
			this.socket = null
			this.isConnected = false
		}
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è Socket.IO
	 * 
	 * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	 * @param callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
	 */
	on(eventName: string, callback: Function) {
		if (!this.callbacks[eventName]) {
			this.callbacks[eventName] = []
		}
		this.callbacks[eventName].push(callback)
		return this
	}

	/**
	 * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π Socket.IO
	 * 
	 * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
	 * @param callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
	 */
	off(eventName: string, callback: Function) {
		if (this.callbacks[eventName]) {
			this.callbacks[eventName] = this.callbacks[eventName].filter(cb => cb !== callback)
		}
		return this
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 * 
	 * @returns true –µ—Å–ª–∏ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
	 */
	isActive(): boolean {
		return this.isConnected && this.socket !== null && this.socket.connected
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	 * 
	 * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
	 * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	 */
	emit(eventName: string, data?: any) {
		if (this.socket && this.socket.connected) {
			this.socket.emit(eventName, data)
		} else {
			console.warn('Socket.IO –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', eventName)
		}
	}

	/**
	 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
	 * 
	 * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
	 * @param data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	 * @private
	 */
	private _emitEvent(eventName: string, data?: any) {
		const callbacks = this.callbacks[eventName] || []
		callbacks.forEach(callback => {
			try {
				callback(data)
			} catch (error) {
				console.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–±—ç–∫–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventName}:`, error)
			}
		})
	}
}

/** –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ Socket.IO –∫–ª–∏–µ–Ω—Ç–∞ */
let socketIOClientInstance: TradeSignalSocketIOClient | null = null

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Socket.IO –∫–ª–∏–µ–Ω—Ç–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
 * 
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä Socket.IO –∫–ª–∏–µ–Ω—Ç–∞
 */
export const getSocketIOClient = (): TradeSignalSocketIOClient => {
	if (typeof window !== 'undefined') {
		// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
		if (!socketIOClientInstance) {
			socketIOClientInstance = new TradeSignalSocketIOClient()
		}
		return socketIOClientInstance
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è SSR
	return new TradeSignalSocketIOClient()
} 
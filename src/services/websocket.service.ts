/**
 * WebSocket Service
 * ------------------------------
 * –°–µ—Ä–≤–∏—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±—ç–∫–µ–Ω–¥–æ–º
 * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–±—ã—Ç–∏—è –≤ Redux-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
 */
'use client'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || 'ws://localhost:4200'
const MAX_RECONNECT_ATTEMPTS = 15
const RECONNECT_DELAY = 5000

/**
 * WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 */
export class TradeSignalClient {
	private baseUrl: string
	private socket: WebSocket | null
	private isConnected: boolean
	private reconnectAttempts: number
	private maxReconnectAttempts: number
	private reconnectDelay: number
	private callbacks: Record<string, Function[]>

	constructor(baseUrl = SOCKET_URL) {
		this.baseUrl = baseUrl
		this.socket = null
		this.isConnected = false
		this.reconnectAttempts = 0
		this.maxReconnectAttempts = MAX_RECONNECT_ATTEMPTS
		this.reconnectDelay = RECONNECT_DELAY
		this.callbacks = {
			'top:gainers:5min': [], // –õ—É—á—à–∏–µ —Ä–∞—Å—Ç—É—â–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
			'top:losers:5min': [], // –•—É–¥—à–∏–µ –ø–∞–¥–∞—é—â–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
			'top:volume:5min': [], // –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É –∑–∞ 5 –º–∏–Ω—É—Ç
			'top:funding:5min': [], // –¢–æ–ø –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞ 5 –º–∏–Ω—É—Ç
			'top:gainers:24h': [], // –õ—É—á—à–∏–µ —Ä–∞—Å—Ç—É—â–∏–µ –∑–∞ 24 —á–∞—Å–∞
			'top:losers:24h': [], // –•—É–¥—à–∏–µ –ø–∞–¥–∞—é—â–∏–µ –∑–∞ 24 —á–∞—Å–∞
			'signal:volatility': [], // –°–∏–≥–Ω–∞–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'signal:volatilityRange': [], // –°–∏–≥–Ω–∞–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volatilitySpike': [], // –í—Å–ø–ª–µ—Å–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volatilityRange': [], // –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			'volumeSpike': [], // –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞
			'priceChange': [], // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
			'top:gainers': [], // –õ—É—á—à–∏–µ —Ä–∞—Å—Ç—É—â–∏–µ (–æ–±—â–∏–µ)
			'top:losers': [], // –•—É–¥—à–∏–µ –ø–∞–¥–∞—é—â–∏–µ (–æ–±—â–∏–µ)
			'trigger:gainers-24h': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –∑–∞ 24 —á–∞—Å–∞
			'trigger:losers-24h': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –∑–∞ 24 —á–∞—Å–∞
			'trigger:gainers-5min': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –∑–∞ 5 –º–∏–Ω—É—Ç
			'trigger:losers-5min': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –∑–∞ 5 –º–∏–Ω—É—Ç
			'trigger:volume-5min': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±—ä–µ–º–∞ –∑–∞ 5 –º–∏–Ω—É—Ç
			'trigger:funding-5min': [], // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç
			'connect': [], // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			'disconnect': [], // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
			'error': [] // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
		}
	}

	/**
	 * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
	 */
	connect() {
		if (this.socket) {
			console.log('Socket already exists, closing previous connection')
			this.socket.close()
		}

		try {
			this.socket = new WebSocket(`${this.baseUrl}`)

			this.socket.onopen = () => {
				console.log('‚úÖ WebSocket connected successfully')
				this.isConnected = true
				this.reconnectAttempts = 0
				this._emitEvent('connect')
			}

			this.socket.onmessage = (event) => {
				try {
					const message = JSON.parse(event.data)
					const { event: eventType, data } = message

					console.log(`Received ${eventType} event`, data)
					this._emitEvent(eventType, data)
				} catch (err) {
					console.error('Error parsing message:', err)
				}
			}

			this.socket.onclose = (event) => {
				console.log('‚ö†Ô∏è WebSocket connection closed', event)
				this.isConnected = false
				this._emitEvent('disconnect')
				this._tryReconnect()
			}

			this.socket.onerror = (error) => {
				console.error('‚ùå WebSocket error:', error)
				this._emitEvent('error', error)
			}
		} catch (error) {
			console.error('‚ùå Error establishing WebSocket connection:', error)
			this._emitEvent('error', error)
			this._tryReconnect()
		}
	}

	/**
	 * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
	 */
	disconnect() {
		if (this.socket) {
			this.socket.close()
			this.socket = null
			this.isConnected = false
		}
	}

	/**
	 * –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	private _tryReconnect() {
		if (this.reconnectAttempts < this.maxReconnectAttempts) {
			this.reconnectAttempts++
			console.log(
				`üîÑ Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`
			)

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–º–µ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è
			setTimeout(() => {
				this.connect()
			}, this.reconnectDelay)
		} else {
			console.error('‚õî Max reconnect attempts reached. Please check your connection.')
		}
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
	 * @param {string} eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
	 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	 */
	on(eventName: string, callback: Function) {
		if (!this.callbacks[eventName]) {
			this.callbacks[eventName] = []
		}
		this.callbacks[eventName].push(callback)
		return this
	}

	/**
	 * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
	 * @param {string} eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
	 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	 */
	off(eventName: string, callback: Function) {
		if (this.callbacks[eventName]) {
			this.callbacks[eventName] = this.callbacks[eventName].filter(
				(cb) => cb !== callback
			)
		}
		return this
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 * @returns {boolean} - true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
	 */
	isActive(): boolean {
		return (
			this.isConnected &&
			this.socket !== null &&
			this.socket.readyState === WebSocket.OPEN
		)
	}

	/**
	 * –í—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è
	 * @param {string} eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
	 * @param {any} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	 */
	private _emitEvent(eventName: string, data?: any) {
		if (this.callbacks[eventName]) {
			this.callbacks[eventName].forEach((callback) => {
				try {
					callback(data)
				} catch (err) {
					console.error(`Error in callback for event ${eventName}:`, err)
				}
			})
		}
	}
}

// –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
let wsClientInstance: TradeSignalClient | null = null

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
 */
export const getWebSocketClient = (): TradeSignalClient => {
	if (!wsClientInstance) {
		wsClientInstance = new TradeSignalClient()
	}
	return wsClientInstance
} 
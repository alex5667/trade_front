import { io, Socket } from 'socket.io-client'

/**
 * WebSocket Service –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ trade_back
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É Trade Back
 * –Ω–∞ –ø–æ—Ä—Ç—É 4202 (–ù–ï –Ω–∞ –ø–æ—Ä—Ç—É 4207, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è REST API).
 */
export class WebSocketService {
	private socket: Socket | null = null
	private reconnectAttempts = 0
	private maxReconnectAttempts = 5
	private isConnected = false
	private subscribers = new Map<string, Array<(data: any) => void>>()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	private readonly config = {
		url: process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'http://localhost:4202',
		options: {
			transports: ['websocket', 'polling'],
			timeout: 10000,
			reconnection: true,
			reconnectionAttempts: this.maxReconnectAttempts,
			reconnectionDelay: 1000,
			autoConnect: false
		}
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	public async connect(): Promise<boolean> {
		if (this.socket?.connected) {
			console.log('üîå WebSocket already connected')
			return true
		}

		try {
			console.log(`üîÑ Connecting to WebSocket: ${this.config.url}`)

			this.socket = io(this.config.url, this.config.options)

			this.setupEventHandlers()
			this.socket.connect()

			return new Promise((resolve) => {
				const timeout = setTimeout(() => {
					console.log('‚ùå WebSocket connection timeout')
					resolve(false)
				}, 10000)

				this.socket?.on('connect', () => {
					clearTimeout(timeout)
					this.isConnected = true
					this.reconnectAttempts = 0
					console.log('‚úÖ WebSocket connected successfully')
					resolve(true)
				})

				this.socket?.on('connect_error', (error) => {
					clearTimeout(timeout)
					console.log('‚ùå WebSocket connection error:', error)
					resolve(false)
				})
			})
		} catch (error) {
			console.log('‚ùå Failed to initialize WebSocket:', error)
			return false
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
	 */
	private setupEventHandlers(): void {
		if (!this.socket) return

		// –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		this.socket.on('connect', () => {
			this.isConnected = true
			this.reconnectAttempts = 0
			console.log(`üü¢ Connected to WebSocket server (ID: ${this.socket?.id})`)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			this.socket?.emit('ping', {
				message: 'connection test from trade_front',
				timestamp: new Date().toISOString()
			})
		})

		// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
		this.socket.on('disconnect', (reason) => {
			this.isConnected = false
			console.log(`üî¥ WebSocket disconnected: ${reason}`)
		})

		// –û—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		this.socket.on('connect_error', (error) => {
			this.isConnected = false
			this.reconnectAttempts++
			console.log(`‚ùå WebSocket connection error (attempt ${this.reconnectAttempts}):`, error)
		})

		// –û—Ç–≤–µ—Ç –Ω–∞ ping
		this.socket.on('pong', (data) => {
			console.log('üèì Received pong from server:', data)
		})

		// –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
		this.socket.on('trigger:volatility', (data) => {
			console.log('üìä Volatility signal:', data)
			this.notifySubscribers('volatility', data)
		})

		this.socket.on('trigger:volatilityRange', (data) => {
			console.log('üìà Volatility range signal:', data)
			this.notifySubscribers('volatilityRange', data)
		})

		this.socket.on('trigger:volatilitySpike', (data) => {
			console.log('‚ö° Volatility spike signal:', data)
			this.notifySubscribers('volatilitySpike', data)
		})

		// –¢–æ–ø-–ª–∏—Å—Ç—ã (–æ—Ç–∫–ª—é—á–µ–Ω–æ: REST-only)
		// this.socket.on('top:gainers', (data) => {
		//   this.notifySubscribers('top-gainers', data)
		// })
		// this.socket.on('top:losers', (data) => {
		//   this.notifySubscribers('top-losers', data)
		// })

		// –û–±—ä–µ–º—ã –∏ —Å–∏–≥–Ω–∞–ª—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–æ: REST-only)
		// this.socket.on('trigger:volumeSignals', (data) => {
		//   this.notifySubscribers('volume-signals', data)
		// })
		// this.socket.on('trigger:fundingSignals', (data) => {
		//   this.notifySubscribers('funding-signals', data)
		// })

		// –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
		this.socket.on('system:health-check', (data) => {
			console.log('‚ù§Ô∏è System health check:', data)
			this.notifySubscribers('system-health', data)
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
		this.socket.onAny((eventName, data) => {
			if (!eventName.startsWith('connect') && !eventName.startsWith('disconnect') && eventName !== 'pong') {
				console.log(`üì® Received event [${eventName}]:`, data)
				this.notifySubscribers(eventName, data)
			}
		})
	}

	/**
	 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π
	 */
	public subscribe(eventType: string, callback: (data: any) => void): void {
		if (!this.subscribers.has(eventType)) {
			this.subscribers.set(eventType, [])
		}
		this.subscribers.get(eventType)!.push(callback)
	}

	/**
	 * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
	 */
	public unsubscribe(eventType: string, callback: (data: any) => void): void {
		const subscribers = this.subscribers.get(eventType)
		if (subscribers) {
			const index = subscribers.indexOf(callback)
			if (index > -1) {
				subscribers.splice(index, 1)
			}
		}
	}

	/**
	 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	 */
	private notifySubscribers(eventType: string, data: any): void {
		const subscribers = this.subscribers.get(eventType)
		if (subscribers) {
			subscribers.forEach(callback => {
				try {
					callback(data)
				} catch (error) {
					console.log(`Error in subscriber callback for ${eventType}:`, error)
				}
			})
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	 */
	public emit(eventName: string, data: any): void {
		if (this.socket?.connected) {
			this.socket.emit(eventName, data)
		} else {
			console.warn('‚ùå WebSocket not connected, cannot emit event:', eventName)
		}
	}

	/**
	 * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
	 */
	public disconnect(): void {
		if (this.socket) {
			console.log('üîå Disconnecting from WebSocket')
			this.socket.disconnect()
			this.socket = null
			this.isConnected = false
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	public isWebSocketConnected(): boolean {
		return this.isConnected && this.socket?.connected === true
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞
	 */
	public getClientId(): string | undefined {
		return this.socket?.id
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	 */
	public getConnectionStats(): any {
		return {
			connected: this.isConnected,
			clientId: this.socket?.id,
			transport: this.socket?.io.engine.transport.name,
			subscribersCount: Array.from(this.subscribers.values()).reduce((sum, subs) => sum + subs.length, 0),
			url: this.config.url
		}
	}
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const websocketService = new WebSocketService() 
/**
 * Signals Redux Slice
 * ------------------------------
 * –°–ª–∞–π—Å Redux –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
 * –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
 */
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

import {
	FundingCoin,
	PriceChangeSignal,
	SignalsState,
	TimeframeCoin,
	TriggerEvent,
	VolatilitySignal,
	VolumeSignal
} from './signal.types'

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–∞–π—Å–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
const initialState: SignalsState = {
	connection: {
		isConnected: false,
		lastError: null
	},
	volatilitySignals: [],
	volumeSignals: [],
	priceChangeSignals: [],
	timeframe: {
		'5min': {
			gainers: [],
			losers: [],
			volume: []
		},
		'24h': {
			gainers: [],
			losers: []
		}
	},
	funding: [],
	triggers: {
		'5min': {
			gainers: [],
			losers: [],
			volume: [],
			funding: []
		},
		'24h': {
			gainers: [],
			losers: []
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π Redux
const logAction = (actionType: string, payload: any) => {
	// console.log(`üîÑ [Redux] ${actionType}:`, payload)
}

/**
 * –°–ª–∞–π—Å —Å–∏–≥–Ω–∞–ª–æ–≤ - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
 */
export const signalsSlice = createSlice({
	name: 'signals',
	initialState,
	reducers: {
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		setConnectionStatus: (state, action: PayloadAction<boolean>) => {
			logAction('setConnectionStatus', action.payload)
			state.connection.isConnected = action.payload
		},

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		setConnectionError: (state, action: PayloadAction<string | null>) => {
			logAction('setConnectionError', action.payload)
			state.connection.lastError = action.payload
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		addVolatilitySignal: (state, action: PayloadAction<VolatilitySignal>) => {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —Ç–∏–ø–µ VolatilitySignal
			logAction('addVolatilitySignal', {
				symbol: action.payload.symbol,
				timestamp: action.payload.timestamp
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
			const existingIndex = state.volatilitySignals.findIndex(
				(s) =>
					s.symbol === action.payload.symbol &&
					s.timestamp === action.payload.timestamp
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
				state.volatilitySignals[existingIndex] = action.payload
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
				state.volatilitySignals.unshift(action.payload)
			}

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 100)
			if (state.volatilitySignals.length > 100) {
				state.volatilitySignals = state.volatilitySignals.slice(0, 100)
			}

		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ–±—ä–µ–º–∞
		addVolumeSignal: (state, action: PayloadAction<VolumeSignal>) => {
			logAction('addVolumeSignal', {
				symbol: action.payload.symbol,
				volumeChange: action.payload.volumeChange,
				timestamp: action.payload.timestamp
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
			const existingIndex = state.volumeSignals.findIndex(
				(s) =>
					s.symbol === action.payload.symbol &&
					s.timestamp === action.payload.timestamp
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
				state.volumeSignals[existingIndex] = action.payload
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
				state.volumeSignals.unshift(action.payload)
			}

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 100)
			if (state.volumeSignals.length > 100) {
				state.volumeSignals = state.volumeSignals.slice(0, 100)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
		addPriceChangeSignal: (state, action: PayloadAction<PriceChangeSignal>) => {
			logAction('addPriceChangeSignal', {
				symbol: action.payload.symbol,
				priceChange: action.payload.priceChange,
				timestamp: action.payload.timestamp
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
			const existingIndex = state.priceChangeSignals.findIndex(
				(s) =>
					s.symbol === action.payload.symbol &&
					s.timestamp === action.payload.timestamp
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
				state.priceChangeSignals[existingIndex] = action.payload
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
				state.priceChangeSignals.unshift(action.payload)
			}

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 100)
			if (state.priceChangeSignals.length > 100) {
				state.priceChangeSignals = state.priceChangeSignals.slice(0, 100)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –º–æ–Ω–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
		addTimeframeGainer: (
			state,
			action: PayloadAction<{
				timeframe: '5min' | '24h'
				data: TimeframeCoin
			}>
		) => {
			const { timeframe, data } = action.payload
			logAction('addTimeframeGainer', {
				timeframe,
				symbol: data.symbol,
				percentChange: data.percentChange
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.timeframe[timeframe].gainers.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state.timeframe[timeframe].gainers[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã
				state.timeframe[timeframe].gainers.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			state.timeframe[timeframe].gainers.sort(
				(a, b) => b.percentChange - a.percentChange
			)

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Ç–æ–ø–µ (–Ω–µ –±–æ–ª–µ–µ 20)
			if (state.timeframe[timeframe].gainers.length > 20) {
				state.timeframe[timeframe].gainers = state.timeframe[
					timeframe
				].gainers.slice(0, 20)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
		addTimeframeLoser: (
			state,
			action: PayloadAction<{
				timeframe: '5min' | '24h'
				data: TimeframeCoin
			}>
		) => {
			const { timeframe, data } = action.payload
			logAction('addTimeframeLoser', {
				timeframe,
				symbol: data.symbol,
				percentChange: data.percentChange
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.timeframe[timeframe].losers.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state.timeframe[timeframe].losers[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state.timeframe[timeframe].losers.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –ø–∞–¥–µ–Ω–∏—è –≤–≤–µ—Ä—Ö—É)
			state.timeframe[timeframe].losers.sort(
				(a, b) => a.percentChange - b.percentChange
			)

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Ç–æ–ø–µ (–Ω–µ –±–æ–ª–µ–µ 20)
			if (state.timeframe[timeframe].losers.length > 20) {
				state.timeframe[timeframe].losers = state.timeframe[
					timeframe
				].losers.slice(0, 20)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
		addTimeframeVolume: (
			state,
			action: PayloadAction<{
				timeframe: '5min'
				data: VolumeSignal
			}>
		) => {
			const { data } = action.payload
			logAction('addTimeframeVolume', {
				timeframe: '5min',
				symbol: data.symbol,
				volumeChange: data.volumeChange
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.timeframe['5min'].volume.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state.timeframe['5min'].volume[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state.timeframe['5min'].volume.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞
			state.timeframe['5min'].volume.sort(
				(a, b) => b.volumeChange - a.volumeChange
			)

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Ç–æ–ø–µ (–Ω–µ –±–æ–ª–µ–µ 20)
			if (state.timeframe['5min'].volume.length > 20) {
				state.timeframe['5min'].volume = state.timeframe['5min'].volume.slice(
					0,
					20
				)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–∏
		addFundingData: (state, action: PayloadAction<{ data: FundingCoin }>) => {
			const { data } = action.payload
			logAction('addFundingData', {
				symbol: data.symbol,
				rate: data.rate
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.funding.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state.funding[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state.funding.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–∞–≤–∫–∏ —Ñ–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏—è
			state.funding.sort((a, b) => Math.abs(b.rate) - Math.abs(a.rate))

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–µ –±–æ–ª–µ–µ 20)
			if (state.funding.length > 20) {
				state.funding = state.funding.slice(0, 20)
			}
		},

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
		addTriggerEvent: (
			state,
			action: PayloadAction<TriggerEvent>
		) => {
			const { timeframe, type, data } = action.payload
			logAction('addTriggerEvent', {
				timeframe,
				type,
				dataLength: Array.isArray(data) ? data.length : 1
			})

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			if (
				timeframe === '5min' ||
				(timeframe === '24h' && (type === 'gainers' || type === 'losers'))
			) {
				// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
				if (Array.isArray(data)) {
					// –ï—Å–ª–∏ data - –º–∞—Å—Å–∏–≤, –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
					// @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ
					state.triggers[timeframe][type] = data.slice(0, 10)
				} else if (typeof data === 'string') {
					// –ï—Å–ª–∏ data - —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ
					// @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ
					if (!state.triggers[timeframe][type].includes(data)) {
						// @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ
						state.triggers[timeframe][type].unshift(data)
						// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
						// @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ
						if (state.triggers[timeframe][type].length > 10) {
							// @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ
							state.triggers[timeframe][type].pop()
						}
					}
				}
			}
		},

		// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
		clearSignals: (state) => {
			logAction('clearSignals', {})
			state.volatilitySignals = []
			state.volumeSignals = []
			state.priceChangeSignals = []
			state.timeframe = initialState.timeframe
			state.funding = []
			state.triggers = initialState.triggers
		}
	}
})

// –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
export const {
	setConnectionStatus,
	setConnectionError,
	addVolatilitySignal,
	addVolumeSignal,
	addPriceChangeSignal,
	addTimeframeGainer,
	addTimeframeLoser,
	addTimeframeVolume,
	addFundingData,
	addTriggerEvent,
	clearSignals
} = signalsSlice.actions

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–¥—å—é—Å–µ—Ä–∞
export default signalsSlice.reducer 
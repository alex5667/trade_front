/**
 * –°–ª–∞–π—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—ä–µ–º–∞
 * ------------------------------
 * Redux —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import type { VolumeSignalPrisma } from '@/types/signal.types'
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—ä–µ–º–∞ */
interface VolumeState {
	/** –ú–∞—Å—Å–∏–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—ä–µ–º–∞ */
	signals: VolumeSignalPrisma[]
	/** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
	lastUpdated: number
}

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—ä–µ–º–∞ */
const initialState: VolumeState = {
	signals: [],
	lastUpdated: 0
}

/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
const MAX_SIGNALS = 10

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ–±—ä–µ–º–∞ –ø–æ –æ–±—ä–µ–º—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
 */
const sortSignalsByVolume = (signals: VolumeSignalPrisma[]): VolumeSignalPrisma[] => {
	return [...signals].sort((a, b) => {
		const volumeA = parseFloat(a.volume) || 0
		const volumeB = parseFloat(b.volume) || 0
		return volumeB - volumeA // Sort from highest to lowest
	})
}

export const volumeSlice = createSlice({
	name: 'volume',
	initialState,
	reducers: {
		addVolumeSignal: (state, action: PayloadAction<VolumeSignalPrisma>) => {
			const signal = action.payload

			console.log(`üíæ Adding volume signal to store: ${signal.symbol}`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª —Å —Ç–µ–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.signals.findIndex(
				existingSignal => existingSignal.symbol === signal.symbol
			)

			if (existingIndex !== -1) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ
				console.log(`üîÑ Updating existing volume signal for ${signal.symbol} at index ${existingIndex}`)
				state.signals[existingIndex] = {
					...signal,
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
					createdAt: state.signals[existingIndex].createdAt || new Date().toISOString()
				}
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
				console.log(`‚ûï Adding new volume signal for ${signal.symbol}, current count: ${state.signals.length}`)
				state.signals.unshift({
					...signal,
					createdAt: new Date().toISOString()
				})

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
				if (state.signals.length > MAX_SIGNALS) {
					console.log(`‚úÇÔ∏è Trimming volume signals array to ${MAX_SIGNALS} items`)
					state.signals.length = MAX_SIGNALS
				}
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –æ–±—ä–µ–º—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
			state.signals = sortSignalsByVolume(state.signals)

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
			console.log(`üìä Current volume signals count: ${state.signals.length}`)

			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			state.lastUpdated = Date.now()
		},
		replaceVolumeSignals: (state, action: PayloadAction<VolumeSignalPrisma[]>) => {
			// Deduplicate signals by symbol before replacing
			const uniqueSignals = (action.payload || []).reduce((acc: VolumeSignalPrisma[], signal) => {
				const existingIndex = acc.findIndex(s => s.symbol === signal.symbol)
				if (existingIndex === -1) {
					acc.push({
						...signal,
						createdAt: signal.createdAt || new Date().toISOString()
					})
				} else {
					// Update existing signal with newer data
					acc[existingIndex] = {
						...signal,
						createdAt: acc[existingIndex].createdAt || new Date().toISOString()
					}
				}
				return acc
			}, [])

			state.signals = sortSignalsByVolume(uniqueSignals)
			state.lastUpdated = Date.now()
		},
		clearVolumeSignals: (state) => {
			console.log(`üßπ Clearing all volume signals`)
			state.signals = []
			state.lastUpdated = Date.now()
		}
	}
})

export const {
	addVolumeSignal,
	replaceVolumeSignals,
	clearVolumeSignals
} = volumeSlice.actions

export default volumeSlice.reducer 
/**
 * –°–ª–∞–π—Å –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
 * ------------------------------
 * Redux —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { FundingCoin } from '../signal.types'

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */
interface FundingState {
	/** –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */
	coins: FundingCoin[]
	/** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
	lastUpdated: number
}

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */
const initialState: FundingState = {
	coins: [],
	lastUpdated: 0
}

/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */
const MAX_COINS = 20

export const fundingSlice = createSlice({
	name: 'funding',
	initialState,
	reducers: {
		addFundingData: (state, action: PayloadAction<{ data: FundingCoin }>) => {
			const { data } = action.payload
			console.log(`üí± Adding funding data: ${data.symbol} (rate: ${data.rate.toFixed(4)}%)`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state.coins.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state.coins[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state.coins.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Å—Ç–∞–≤–∫–∏ (–Ω–∞–∏–±–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏ —Å–Ω–∞—á–∞–ª–∞)
			state.coins.sort((a, b) => Math.abs(b.rate) - Math.abs(a.rate))

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
			if (state.coins.length > MAX_COINS) {
				state.coins = state.coins.slice(0, MAX_COINS)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			state.lastUpdated = Date.now()
		},
		replaceFundingData: (state, action: PayloadAction<FundingCoin[]>) => {
			state.coins = (action.payload || [])
				.slice()
				.sort((a, b) => Math.abs(b.rate) - Math.abs(a.rate))
				.slice(0, MAX_COINS)
			state.lastUpdated = Date.now()
		},
		clearFundingData: (state) => {
			console.log('üßπ Clearing all funding data')
			state.coins = []
			state.lastUpdated = Date.now()
		}
	}
})

export const {
	addFundingData,
	replaceFundingData,
	clearFundingData
} = fundingSlice.actions

export default fundingSlice.reducer 
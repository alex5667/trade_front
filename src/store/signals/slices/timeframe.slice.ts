/**
 * –°–ª–∞–π—Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
 * ------------------------------
 * Redux —Å–ª–∞–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ 24-—á–∞—Å–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø–∞–º–∏ —Ä–∞—Å—Ç—É—â–∏—Ö/–ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { TimeframeCoin, TimeframeData } from '../signal.types'

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ */
const initialState: TimeframeData = {
	'24h': {
		gainers: [],
		losers: []
	}
}

/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ */
const MAX_ITEMS = 20

export const timeframeSlice = createSlice({
	name: 'timeframe',
	initialState,
	reducers: {
		addTimeframeGainer: (
			state,
			action: PayloadAction<{
				timeframe: '24h'
				data: TimeframeCoin
			}>
		) => {
			const { timeframe, data } = action.payload
			console.log(`üí∞ Adding timeframe gainer: ${data.symbol} (${data.percentChange.toFixed(2)}%) to ${timeframe}`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state[timeframe].gainers.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state[timeframe].gainers[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state[timeframe].gainers.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–æ—Å—Ç —Å–Ω–∞—á–∞–ª–∞)
			state[timeframe].gainers.sort(
				(a, b) => b.percentChange - a.percentChange
			)

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
			if (state[timeframe].gainers.length > MAX_ITEMS) {
				state[timeframe].gainers = state[timeframe].gainers.slice(0, MAX_ITEMS)
			}
		},

		addTimeframeLoser: (
			state,
			action: PayloadAction<{
				timeframe: '24h'
				data: TimeframeCoin
			}>
		) => {
			const { timeframe, data } = action.payload
			console.log(`üìâ Adding timeframe loser: ${data.symbol} (${data.percentChange.toFixed(2)}%) to ${timeframe}`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º
			const existingIndex = state[timeframe].losers.findIndex(
				(coin) => coin.symbol === data.symbol
			)

			if (existingIndex >= 0) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
				state[timeframe].losers[existingIndex] = data
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
				state[timeframe].losers.push(data)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–∞–¥–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
			state[timeframe].losers.sort(
				(a, b) => a.percentChange - b.percentChange
			)

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
			if (state[timeframe].losers.length > MAX_ITEMS) {
				state[timeframe].losers = state[timeframe].losers.slice(0, MAX_ITEMS)
			}
		},

		clearTimeframeData: (state) => {
			console.log('üßπ Clearing all timeframe data')
			// –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
			return initialState
		}
	}
})

export const {
	addTimeframeGainer,
	addTimeframeLoser,
	clearTimeframeData
} = timeframeSlice.actions

export default timeframeSlice.reducer 
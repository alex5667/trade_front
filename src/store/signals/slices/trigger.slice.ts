/**
 * –°–ª–∞–π—Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 * ------------------------------
 * Redux —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { TriggerEvent, TriggersData } from '../signal.types'

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π */
const initialState: TriggersData = {
	'24h': {
		gainers: [],
		losers: []
	}
}

/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
const MAX_TRIGGERS = 10

export const triggerSlice = createSlice({
	name: 'trigger',
	initialState,
	reducers: {
		addTriggerEvent: (
			state,
			action: PayloadAction<TriggerEvent>
		) => {
			const { timeframe, type, data } = action.payload

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ —Ç–∏–ø–∞
			if (timeframe === '24h' && ['gainers', 'losers'].includes(type)) {
				if (Array.isArray(data)) {
					// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - –º–∞—Å—Å–∏–≤, –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
					console.log(`üîî Setting ${timeframe} ${type} triggers: ${data.length} items`)
					// @ts-ignore - –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
					state[timeframe][type] = data.slice(0, MAX_TRIGGERS)
				} else if (typeof data === 'string') {
					// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ –∏ –µ—ë –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –¥–æ–±–∞–≤–ª—è–µ–º
					// @ts-ignore - –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
					if (!state[timeframe][type].includes(data)) {
						console.log(`üîî Adding single ${timeframe} ${type} trigger: ${data}`)
						// @ts-ignore - –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
						state[timeframe][type].unshift(data)

						// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
						// @ts-ignore - –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
						if (state[timeframe][type].length > MAX_TRIGGERS) {
							// @ts-ignore - –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
							state[timeframe][type].pop()
						}
					}
				}
			} else {
				console.warn(`‚ö†Ô∏è Invalid trigger combination: ${timeframe} ${type}`)
			}
		},

		clearTriggers: (state) => {
			console.log('üßπ Clearing all triggers')
			return initialState
		},

		clearTimeframeTriggers: (state, action: PayloadAction<'24h'>) => {
			const timeframe = action.payload
			console.log(`üßπ Clearing triggers for timeframe: ${timeframe}`)

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
			state['24h'] = {
				gainers: [],
				losers: []
			}
		}
	}
})

export const {
	addTriggerEvent,
	clearTriggers,
	clearTimeframeTriggers
} = triggerSlice.actions

export default triggerSlice.reducer 
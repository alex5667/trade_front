/**
 * –°–ª–∞–π—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
 * ------------------------------
 * Redux —Å–ª–∞–π—Å –¥–ª—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
 * –≠—Ç–æ—Ç —Å–ª–∞–π—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ 
 * –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–∞–π—Å—ã
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { VolatilitySignal } from '../signal.types'

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ */
interface VolatilityState {
	/** –ú–∞—Å—Å–∏–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ */
	signals: VolatilitySignal[]
	/** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
	lastUpdated: number
}

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ */
const initialState: VolatilityState = {
	signals: [],
	lastUpdated: 0
}

/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
const MAX_SIGNALS = 50

export const volatilitySlice = createSlice({
	name: 'volatility',
	initialState,
	reducers: {
		addVolatilitySignal: (state, action: PayloadAction<VolatilitySignal>) => {
			const signal = action.payload
			console.log(`üíæ Adding volatility signal to store: ${signal.symbol}, type: ${signal.signalType || 'volatility'}`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª —Å —Ç–µ–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
			const existingIndex = state.signals.findIndex(
				existingSignal =>
					existingSignal.symbol === signal.symbol &&
					existingSignal.timestamp === signal.timestamp &&
					existingSignal.signalType === signal.signalType
			)

			if (existingIndex !== -1) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ
				console.log(`üîÑ Updating existing signal at index ${existingIndex}`)
				state.signals[existingIndex] = {
					...signal,
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
					createdAt: state.signals[existingIndex].createdAt || Date.now()
				}
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
				console.log(`‚ûï Adding new signal, current count: ${state.signals.length}`)
				state.signals.unshift({
					...signal,
					createdAt: Date.now()
				})

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
				if (state.signals.length > MAX_SIGNALS) {
					console.log(`‚úÇÔ∏è Trimming signals array to ${MAX_SIGNALS} items`)
					state.signals.length = MAX_SIGNALS
				}
			}

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
			console.log(`üìä Current volatility signals count: ${state.signals.length}`)

			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			state.lastUpdated = Date.now()
		},
		clearVolatilitySignals: (state) => {
			console.log(`üßπ Clearing all volatility signals`)
			state.signals = []
			state.lastUpdated = Date.now()
		}
	}
})

export const {
	addVolatilitySignal,
	clearVolatilitySignals
} = volatilitySlice.actions

export default volatilitySlice.reducer 
'use client'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç SignalTable
 * ------------------------------
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redux store –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 */
import { useCallback, useEffect, useRef, useState } from 'react'
import { useSelector } from 'react-redux'

import {
	selectConnectionStatus,
	selectFundingData,
	selectPriceChangeSignals,
	selectTimeframeData,
	selectTimeframeTriggers,
	selectVolatilitySignals,
	selectVolumeSignals
} from '@/store/signals'

import styles from './Signal-table.module.scss'
import { ConnectionStatus } from './connection-status/ConnectionStatus'
import { TimeframeSection } from './timeframe-section/TimeframeSection'
import { VolatilitySection } from './volatility-section/VolatilitySection'
import { VolumeSection } from './volume-section/VolumeSection'

/**
 * SignalTable - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 *
 * –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:
 * 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –∏–∑ Redux store
 * 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
 * 3. –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ SignalSocketInitializer –≤ layout
 */
export const SignalTable = () => {
	const componentId = useRef(`signal-table-${Date.now()}`)
	console.log(`üìä [${componentId.current}] SignalTable —Å–æ–∑–¥–∞–Ω`)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redux —Å –ø–æ–º–æ—â—å—é —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
	const isConnected = useSelector(selectConnectionStatus)
	const volatilitySignals = useSelector(selectVolatilitySignals)
	const volumeSignals = useSelector(selectVolumeSignals)
	const priceChangeSignals = useSelector(selectPriceChangeSignals)
	const fundingData = useSelector(selectFundingData)
	const triggers = useSelector(selectTimeframeTriggers)
	const timeframeData = useSelector(selectTimeframeData)

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
	const prevConnectedRef = useRef(isConnected)

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
	const [loadedSections, setLoadedSections] = useState({
		timeframe: false,
		volatility: false
	})

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	useEffect(() => {
		if (prevConnectedRef.current !== isConnected) {
			console.log(
				`üîå [${componentId.current}] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${isConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`
			)
			prevConnectedRef.current = isConnected
		}
	}, [isConnected])

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	useEffect(() => {
		console.log(`üìà [${componentId.current}] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:`, {
			volatilityCount: volatilitySignals.length,
			volumeCount: volumeSignals.length,
			priceChangeCount: priceChangeSignals.length,
			fundingDataCount: fundingData.length,
			triggers: {
				gainers: triggers.gainers.length,
				losers: triggers.losers.length
			}
		})
	}, [
		volatilitySignals,
		volumeSignals,
		priceChangeSignals,
		fundingData,
		triggers
	])

	// Callback –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∫—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
	const handleTimeframeSectionLoad = useCallback(() => {
		console.log(`‚è±Ô∏è [${componentId.current}] –°–µ–∫—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`)
		setLoadedSections(prev => ({
			...prev,
			timeframe: true
		}))
	}, [])

	// Callback –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∫—Ü–∏–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
	const handleVolatilitySectionLoad = useCallback(() => {
		console.log(`üìä [${componentId.current}] –°–µ–∫—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`)
		setLoadedSections(prev => ({
			...prev,
			volatility: true
		}))
	}, [])

	// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–µ–∫—Ü–∏–π –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
	useEffect(() => {
		if (isConnected) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
			if (
				triggers &&
				(triggers.gainers.length > 0 || triggers.losers.length > 0)
			) {
				handleTimeframeSectionLoad()
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			if (volatilitySignals.length > 0) {
				handleVolatilitySectionLoad()
			}
		}
	}, [
		isConnected,
		triggers,
		volatilitySignals,
		handleTimeframeSectionLoad,
		handleVolatilitySectionLoad
	])

	// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	useEffect(() => {
		// –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ref –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ cleanup —Ñ—É–Ω–∫—Ü–∏–∏
		const currentComponentId = componentId.current
		console.log(`üîÑ [${currentComponentId}] SignalTable —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω`)

		return () => {
			console.log(`üõë [${currentComponentId}] SignalTable —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω`)
		}
	}, [])

	return (
		<div className={styles.container}>
			{/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
			<ConnectionStatus />

			{/* –°–µ–∫—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ */}
			<div className={styles.section}>
				<TimeframeSection
					timeframe={{
						gainers: timeframeData.gainers,
						losers: timeframeData.losers
					}}
					triggers={{ gainers: triggers.gainers, losers: triggers.losers }}
				/>
			</div>

			{/* –°–µ–∫—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ */}
			<div className={styles.section}>
				<VolatilitySection />
			</div>

			{/* –°–µ–∫—Ü–∏—è –æ–±—ä–µ–º–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è */}
			<div className={styles.section}>
				<VolumeSection />
			</div>
		</div>
	)
}
